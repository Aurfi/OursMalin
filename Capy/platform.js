(() => {
  // Jumping¬†Capy¬†: jeu de plateforme √† d√©filement inspir√© de Super¬†Mario.
  // Le capybara peut courir vers la gauche ou la droite et sauter pour √©viter
  // des trous et des ennemis.  Les niveaux sont d√©finis statiquement afin
  // d'√™tre facilement extensibles et modifiables sans changer la logique de
  // base.  Les coordonn√©es verticales sont mesur√©es √† partir du sol (0
  // repr√©sente le niveau du sol).  La cam√©ra suit le joueur afin de
  // parcourir un niveau plus large que l'√©cran.

  const canvas = document.getElementById('platformCanvas');
  const ctx = canvas.getContext('2d');
  let width = canvas.width;
  let height = canvas.height;

  // Image pour Super¬†Capy.  Cette illustration d√©tour√©e sera utilis√©e dans
  // Player.draw() pour remplacer les formes vectorielles du h√©ros et
  // respecter l'ic√¥ne de Super¬†Capy sur le menu.
  const capySuperImg = new Image();
  // Utiliser exclusivement la version transparente de Super¬†Capy.  Le jeu
  // original fournissait des sprites avec un fond beige.  Afin de mieux
  // s'int√©grer √† l'arri√®re‚Äëplan du niveau, nous chargeons d√©sormais une
  // version d√©tour√©e et transparente (fichier capybara_super_user.png) que
  // nous avons ajout√© au dossier assets √† partir de l'image fournie par
  // l'utilisateur.  Si ce fichier est absent, le jeu tombera
  // automatiquement sur l'ancien sprite.
  capySuperImg.src = 'assets/capybara_super_user.png';

  // √âtat du jeu : 'playing', 'gameover' ou 'win'
  let state = 'playing';
  let win = false;

  // Score et meilleur score
  let score = 0;
  let highScore = 0;
  try {
    const stored = localStorage.getItem('capyPlatformHighScore');
    if (stored !== null) highScore = parseInt(stored, 10) || 0;
  } catch (e) {
    highScore = 0;
  }

  // S√©lecteurs d'interface
  const gameOverOverlay = document.getElementById('platform-gameover');
  const currentScoreEl = document.getElementById('platform-current-score');
  const highScoreEl = document.getElementById('platform-high-score');
  const funMessageEl = document.getElementById('platform-fun-message');
  const replayBtn = document.getElementById('platform-replay-button');
  const menuBtn = document.getElementById('platform-menu-button');
  const nextBtn = document.getElementById('platform-next-button');
  // √âl√©ment DOM pour la fl√®che directionnelle.  Cet √©l√©ment est d√©fini dans
  // platform.html et s'affiche au d√©marrage de chaque niveau pour
  // indiquer la direction √† suivre.  Un timer est utilis√© pour le
  // masquer automatiquement apr√®s une dur√©e d√©finie.
  const directionArrowEl = document.getElementById('direction-arrow');
  let arrowTimeoutId = null;
  // Mobile controls
  const btnLeft = document.getElementById('btn-left');
  const btnRight = document.getElementById('btn-right');
  const btnJump = document.getElementById('btn-jump');

  // Audio
  const AudioContext = window.AudioContext || window.webkitAudioContext;
  let audioCtx;
  try {
    audioCtx = new AudioContext();
  } catch (e) {
    audioCtx = null;
  }
  // Indicateurs de son.  isMuted coupe tous les sons et la musique.
  let isMuted = false;
  // Audio ambiant du niveau.  Ce fichier est un bruit blanc (ou vide) qui
  // pourra √™tre remplac√© par une vraie ambiance par l‚Äôutilisateur.  Il est
  // lu en boucle pendant le jeu.
  const ambient = new Audio('assets/sounds/ambient_platform.wav');
  ambient.loop = true;

  // Appliquer imm√©diatement le volume global √† l'ambiance.
  applyVolume();

  // ---------------------------------------------------------------------------
  // Ajouts pour la version √©tendue de Super¬†Capy
  //
  // ENEMY_HITBOX_MARGIN : r√©duit la taille de la bo√Æte de collision des
  // ennemis pour offrir un peu de tol√©rance au joueur.  Un ennemi n'est
  // touch√© que si le capybara le chevauche r√©ellement, ce qui rend le jeu
  // plus indulgent.
  const ENEMY_HITBOX_MARGIN = 6;

  // Liste des tuyaux pr√©sents dans le niveau.  Chaque tuyau peut optionnellement
  // d√©finir des coordonn√©es destX et destY pour t√©l√©porter le joueur √†
  // l'entr√©e d'un autre tuyau lorsqu'il appuie sur la touche bas.
  let pipes = [];

  // Segments de trace laiss√©s derri√®re le joueur.  Lorsqu'il se d√©place,
  // des points sont ajout√©s dans cette liste et s'estompent progressivement.
  let trailSegments = [];
  const MAX_TRAIL_SEGMENTS = 80;

  // Hauteur maximale autoris√©e pour les niveaux aquatiques.  Ce param√®tre
  // est d√©fini lors du chargement du niveau via lvl.maxY.  Il permet de
  // limiter la mont√©e du joueur sous l'eau afin de conserver le capybara
  // dans le cadre de jeu.
  let levelMaxY = 0;

  /**
   * Calcule le volume global enregistr√© par le menu.  Si aucune valeur
   * n'est trouv√©e, retourne 0,5 par d√©faut.  Ce volume est appliqu√© √†
   * l'audio ambiant et aux effets sonores.
   */
  function getGlobalVolume() {
    let v = 0.5;
    try {
      const stored = localStorage.getItem('capyGlobalVolume');
      if (stored !== null) v = parseFloat(stored);
    } catch (e) {
      /* ignore */
    }
    return isNaN(v) ? 0.5 : v;
  }

  /**
   * Applique le volume global ou coupe compl√®tement le son selon isMuted.
   */
  function applyVolume() {
    const vol = isMuted ? 0 : getGlobalVolume();
    ambient.volume = vol;
  }

  /**
   * Joue un petit bip pour les actions (saut, pi√®ce, etc.).  Ne joue rien si
   * le son est coup√© ou si le contexte audio n'existe pas.
   */
  function playBeep(frequency, duration = 0.1, volume = 0.1) {
    if (!audioCtx || isMuted) return;
    const ctx2 = audioCtx;
    const osc = ctx2.createOscillator();
    const gain = ctx2.createGain();
    osc.frequency.value = frequency;
    osc.type = 'square';
    gain.gain.value = volume;
    osc.connect(gain);
    gain.connect(ctx2.destination);
    const now = ctx2.currentTime;
    osc.start(now);
    osc.stop(now + duration);
  }

  /**
   * D√©marre la lecture de l'ambiance lorsqu'une partie d√©bute.  Si le son
   * est coup√©, la lecture est mise en pause.  L'ambiance continue en boucle
   * jusqu'√† ce que stopMusic() soit appel√©.
   */
  function startMusic() {
    applyVolume();
    if (!isMuted) {
      try {
        ambient.currentTime = 0;
        ambient.play();
      } catch (e) {
        /* ignore */
      }
    }
  }

  /**
   * Arr√™te la musique d'ambiance.  La fonction pause() est utilis√©e au
   * lieu de stop() car cela fonctionne mieux dans tous les navigateurs.
   */
  function stopMusic() {
    try {
      ambient.pause();
    } catch (e) {
      /* ignore */
    }
  }

  // Bouton de volume : coupe/r√©tablit tous les sons et l'ambiance.
  const volumeBtn = document.getElementById('volume-toggle');
  if (volumeBtn) {
    volumeBtn.addEventListener('click', () => {
      isMuted = !isMuted;
      volumeBtn.textContent = isMuted ? 'üîá' : 'üîä';
      if (isMuted) {
        stopMusic();
      } else {
        startMusic();
      }
      applyVolume();
    });
  }

  // ---------------------------------------------------------------------------
  // Gestion de la vitesse ind√©pendante du rafra√Æchissement
  //
  // De nombreux moteurs de jeu basent leurs mouvements et minuteries sur le
  // nombre de frames affich√©es.  Sur des √©crans plus rapides (120¬†Hz, 144¬†Hz),
  // cela entra√Æne des d√©placements plus rapides et des animations qui
  // s‚Äôacc√©l√®rent, tandis que sur des √©crans plus lents (30¬†Hz) le jeu peut
  // sembler poussif.  Afin de rendre Super¬†Capy et les autres mini‚Äëjeux
  // jouables quelle que soit la fr√©quence de rafra√Æchissement, nous appliquons
  // un multiplicateur de vitesse global d√©riv√© de la mesure effectu√©e dans
  // config.js.  Ce multiplicateur est r√©cup√©r√© via window.getGameSpeed('platform')
  // et mis √† jour lorsque l‚Äô√©v√©nement capySpeedUpdated est √©mis.  Toutes les
  // mises √† jour de position et d‚Äôacc√©l√©ration tiennent compte de ce facteur.

  // Facteur de vitesse appliqu√© aux mouvements.  La valeur par d√©faut est 1.
  let speedFactor = 1;
  function applySpeedFactor() {
    try {
      if (window.getGameSpeed) {
        const s = window.getGameSpeed('platform');
        speedFactor = (typeof s === 'number' && s > 0) ? s : 1;
      } else {
        speedFactor = 1;
      }
    } catch (e) {
      speedFactor = 1;
    }
  }
  // Appliquer imm√©diatement le facteur de vitesse et se mettre √† l‚Äô√©coute
  // d‚Äô√©ventuelles mises √† jour dynamiques de la vitesse.
  applySpeedFactor();
  window.addEventListener('capySpeedUpdated', applySpeedFactor);

  // Contr√¥les clavier
  // Objet contenant l'√©tat des touches.  Ajoutons la touche "down" pour
  // permettre d'entrer dans les tuyaux ou de descendre sous l'eau.  Les
  // autres directions restent inchang√©es.
  const keys = { left: false, right: false, up: false, down: false };
  // Derni√®re pression sur la touche bas.  Servira √† d√©tecter un double
  // appui pour traverser les plateformes a√©riennes.
  let lastDownPressTime = 0;
  window.addEventListener('keydown', (e) => {
    if (state === 'playing') {
      if (e.code === 'ArrowLeft' || e.key === 'q' || e.key === 'Q') keys.left = true;
      if (e.code === 'ArrowRight' || e.key === 'd' || e.key === 'D') keys.right = true;
      // Gestion de la touche de saut/monter.  Le joueur saute seulement
      // lorsque le niveau n'est pas aquatique.  Dans un niveau sous-marin,
      // la touche haut sert √† nager vers le haut et ne d√©clenche pas de saut.
      if (e.code === 'ArrowUp' || e.code === 'Space' || e.key === 'z' || e.key === 'Z') {
        keys.up = true;
        // Le joueur ne saute pas sous l'eau : le mouvement vertical est g√©r√©
        // par Player.update() lorsqu'un niveau est marqu√© underwater.
        if (!(levels[currentLevelIndex] && levels[currentLevelIndex].underwater)) {
          player.jump();
        }
      }
      // Touche pour descendre ou entrer dans un tuyau
      if (e.code === 'ArrowDown' || e.key === 's' || e.key === 'S') {
        // Double appui pour traverser les plateformes a√©riennes.  Cette
        // fonctionnalit√© n'est active que lorsque le joueur est pos√© sur une
        // plateforme situ√©e au-dessus du sol (y>0) et que le niveau n'est
        // pas aquatique.
        const now = Date.now();
        const lvl = levels[currentLevelIndex] || {};
        if (player && player.isOnGround && player.y > 0 && !lvl.underwater) {
          if (now - lastDownPressTime < 300) {
            player.dropThroughTimer = 18;
          }
          lastDownPressTime = now;
        }
        keys.down = true;
      }
    } else if (state !== 'playing' && (e.code === 'Space' || e.code === 'Enter')) {
      resetGame();
    }
  });
  window.addEventListener('keyup', (e) => {
    if (e.code === 'ArrowLeft' || e.key === 'q' || e.key === 'Q') keys.left = false;
    if (e.code === 'ArrowRight' || e.key === 'd' || e.key === 'D') keys.right = false;
    if (e.code === 'ArrowUp' || e.code === 'Space' || e.key === 'z' || e.key === 'Z') keys.up = false;
    if (e.code === 'ArrowDown' || e.key === 's' || e.key === 'S') keys.down = false;
  });

  // Contr√¥les mobiles et de bureau pour les boutons fl√©ch√©s.
  // Sur mobile, les √©v√©nements tactiles sont utilis√©s pour le maintien.  Sur
  // bureau (ou certains navigateurs mobiles qui n'envoient pas touchstart),
  // les √©v√©nements mouse/pointer sont √©galement pris en charge.  Chaque
  // handler appelle preventDefault pour √©viter le d√©filement de la page.
  function attachButtonControls(btn, onStart, onEnd) {
    if (!btn) return;
    // Touch events
    btn.addEventListener('touchstart', (e) => {
      e.preventDefault();
      onStart();
    }, { passive: false });
    btn.addEventListener('touchend', (e) => {
      e.preventDefault();
      if (onEnd) onEnd();
    }, { passive: false });
    btn.addEventListener('touchcancel', (e) => {
      e.preventDefault();
      if (onEnd) onEnd();
    }, { passive: false });
    // Mouse events as fallback (desktop or some browsers)
    btn.addEventListener('mousedown', (e) => {
      e.preventDefault();
      onStart();
    });
    if (onEnd) {
      btn.addEventListener('mouseup', (e) => {
        e.preventDefault();
        onEnd();
      });
      btn.addEventListener('mouseleave', (e) => {
        e.preventDefault();
        onEnd();
      });
    }
  }
  // Appliquer aux boutons gauche et droit : maintien pour l'acc√©l√©ration
  attachButtonControls(btnLeft, () => { keys.left = true; }, () => { keys.left = false; });
  attachButtonControls(btnRight, () => { keys.right = true; }, () => { keys.right = false; });
  // Le bouton de saut lance simplement la m√©thode jump du joueur
  if (btnJump) {
    attachButtonControls(btnJump, () => {
      player.jump();
    }, null);
  }

  // D√©finition des niveaux.  Chaque niveau est un objet contenant la hauteur
  // du sol, la largeur totale et des tableaux pour les plateformes (y
  // au‚Äëdessus du sol), les ennemis, les bonus et la zone de fin (goal).
  // Le premier niveau correspond au niveau original.  Deux nouveaux niveaux
  // ont √©t√© ajout√©s pour offrir plus de vari√©t√©.  Les niveaux sont orient√©s
  // soit vers la droite (goal.x > point de d√©part) soit vers la gauche
  // (goal.x < point de d√©part).  Une fl√®che directionnelle s'affiche
  // bri√®vement au d√©but pour indiquer au joueur dans quelle direction se
  // rendre.
  const levels = [
    {
      groundHeight: 80,
      width: 2200,
      // Position de d√©part du joueur.  Si absent, la valeur 50 est utilis√©e.
      startX: 50,
      platforms: [
        // Segments de sol (y = 0).  Les trous sont cr√©√©s en omettant des
        // segments pour forcer le joueur √† sauter par‚Äëdessus.
        { x: 0, y: 0, width: 400, height: 20 },
        { x: 600, y: 0, width: 300, height: 20 },
        { x: 1000, y: 0, width: 400, height: 20 },
        { x: 1500, y: 0, width: 350, height: 20 },
        // Plates‚Äëformes en l'air
        { x: 500, y: 120, width: 150, height: 20 },
        { x: 800, y: 160, width: 120, height: 20 },
        { x: 1300, y: 100, width: 160, height: 20 },
        { x: 1700, y: 140, width: 150, height: 20 }
      ],
      enemies: [
        { x: 700, y: 0, type: 'goomba' },
        { x: 1350, y: 0, type: 'goomba' },
        { x: 1800, y: 140, type: 'goomba' }
      ],
      bonuses: [
        { x: 550, y: 160, type: 'carrot' },
        { x: 850, y: 200, type: 'potato' },
        { x: 1450, y: 130, type: 'carrot' }
      ],
      goal: { x: 2000, y: 0, width: 40, height: 120 }
    },
    // Nouveau niveau 2¬†: un parcours plus long avec un encha√Ænement de
    // plateformes de hauteur moyenne et quelques trous plus larges.  La
    // configuration exige l'utilisation du double saut pour atteindre les
    // plateformes suspendues sans toutefois permettre d'atteindre le haut
    // de l'√©cran avec un seul saut.
    {
      groundHeight: 80,
      width: 2600,
      startX: 50,
      platforms: [
        { x: 0, y: 0, width: 500, height: 20 },
        { x: 650, y: 0, width: 300, height: 20 },
        { x: 1050, y: 0, width: 350, height: 20 },
        { x: 1500, y: 0, width: 500, height: 20 },
        // Plates‚Äëformes a√©riennes √† hauteur moyenne
        { x: 450, y: 120, width: 160, height: 20 },
        { x: 820, y: 170, width: 140, height: 20 },
        { x: 1250, y: 140, width: 170, height: 20 },
        { x: 1700, y: 180, width: 130, height: 20 },
        { x: 2000, y: 140, width: 170, height: 20 }
      ],
      enemies: [
        { x: 600, y: 0, type: 'goomba' },
        { x: 900, y: 0, type: 'goomba' },
        { x: 1450, y: 0, type: 'goomba' },
        { x: 1850, y: 140, type: 'goomba' }
      ],
      bonuses: [
        { x: 500, y: 160, type: 'carrot' },
        { x: 880, y: 210, type: 'potato' },
        { x: 1300, y: 190, type: 'carrot' },
        { x: 1900, y: 220, type: 'potato' }
      ],
      goal: { x: 2400, y: 0, width: 40, height: 120 }
    },
    // Nouveau niveau¬†3¬†: un aller‚Äëretour o√π le joueur doit se diriger
    // vers la gauche pour atteindre le drapeau.  Les plateformes sont
    // dispos√©es de fa√ßon sym√©trique et imposent de ma√Ætriser le double
    // saut.  Le d√©part est situ√© vers la droite et la fl√®che directionnelle
    // indiquera de partir vers la gauche.
    {
      groundHeight: 80,
      width: 2600,
      // Ce niveau d√©bute √† droite et se dirige vers la gauche.  Le
      // joueur est positionn√© vers la fin du niveau et doit revenir
      // jusqu'au d√©but.  La direction est explicitement indiqu√©e.
      startX: 2400,
      direction: 'left',
      platforms: [
        { x: 2100, y: 0, width: 500, height: 20 },
        { x: 1600, y: 0, width: 350, height: 20 },
        { x: 1100, y: 0, width: 300, height: 20 },
        { x: 500, y: 0, width: 400, height: 20 },
        // Plates‚Äëformes a√©riennes
        { x: 1900, y: 150, width: 150, height: 20 },
        { x: 1500, y: 120, width: 170, height: 20 },
        { x: 900, y: 160, width: 150, height: 20 },
        { x: 600, y: 200, width: 130, height: 20 }
      ],
      enemies: [
        { x: 2000, y: 0, type: 'goomba' },
        { x: 1500, y: 0, type: 'goomba' },
        { x: 800, y: 0, type: 'goomba' },
        { x: 550, y: 200, type: 'goomba' }
      ],
      bonuses: [
        { x: 1850, y: 200, type: 'carrot' },
        { x: 1420, y: 170, type: 'potato' },
        { x: 780, y: 210, type: 'carrot' },
        { x: 520, y: 240, type: 'potato' }
      ],
      goal: { x: 100, y: 0, width: 40, height: 120 }
    }
    ,
    // Niveau¬†4¬†: parcours √©tendu avec de nombreuses plateformes a√©riennes.  De
    // longs segments de sol alternent avec des trous et des plateformes
    // suspendues dispos√©es √† diff√©rentes hauteurs.  Le joueur commence
    // √† gauche et doit utiliser le double saut avec parcimonie pour
    // atteindre les bonus et √©viter les ennemis.  Les goombas sont
    // positionn√©s aussi bien au sol que sur les plateformes.
    {
      groundHeight: 80,
      width: 2800,
      startX: 50,
      platforms: [
        { x: 0, y: 0, width: 400, height: 20 },
        { x: 600, y: 0, width: 300, height: 20 },
        { x: 1100, y: 0, width: 350, height: 20 },
        { x: 1700, y: 0, width: 400, height: 20 },
        // Plates‚Äëformes a√©riennes √† diff√©rentes hauteurs
        { x: 500, y: 140, width: 150, height: 20 },
        { x: 900, y: 180, width: 140, height: 20 },
        { x: 1400, y: 140, width: 160, height: 20 },
        { x: 1800, y: 200, width: 130, height: 20 },
        { x: 2200, y: 160, width: 180, height: 20 }
      ],
      enemies: [
        { x: 700, y: 0, type: 'goomba' },
        { x: 950, y: 0, type: 'goomba' },
        { x: 1500, y: 0, type: 'goomba' },
        { x: 1900, y: 200, type: 'goomba' },
        { x: 2300, y: 160, type: 'goomba' }
      ],
      bonuses: [
        { x: 550, y: 160, type: 'carrot' },
        { x: 940, y: 220, type: 'potato' },
        { x: 1450, y: 180, type: 'carrot' },
        { x: 1850, y: 240, type: 'potato' },
        { x: 2250, y: 190, type: 'carrot' }
      ],
      goal: { x: 2600, y: 0, width: 40, height: 120 }
    },
    // Niveau¬†5¬†: d√©fi vertical.  Ce niveau comporte des tours de
    // plateformes superpos√©es qui obligent √† encha√Æner les sauts pour
    // progresser.  Des s√©ries de plateformes √©lev√©es facilitent la
    // travers√©e mais requi√®rent un bon timing.  La largeur importante
    // augmente la dur√©e de la partie.
    {
      groundHeight: 80,
      width: 3000,
      startX: 50,
      platforms: [
        { x: 0, y: 0, width: 500, height: 20 },
        { x: 600, y: 0, width: 350, height: 20 },
        { x: 1200, y: 0, width: 400, height: 20 },
        { x: 1800, y: 0, width: 450, height: 20 },
        // Tours de plateformes verticales sur la premi√®re moiti√©
        { x: 800, y: 120, width: 140, height: 20 },
        { x: 800, y: 200, width: 140, height: 20 },
        { x: 800, y: 280, width: 140, height: 20 },
        { x: 1600, y: 120, width: 150, height: 20 },
        { x: 1600, y: 200, width: 150, height: 20 },
        { x: 1600, y: 280, width: 150, height: 20 },
        // Plateformes sur la deuxi√®me moiti√© pour cr√©er un chemin a√©rien
        { x: 2200, y: 160, width: 180, height: 20 },
        { x: 2400, y: 220, width: 180, height: 20 },
        { x: 2600, y: 180, width: 150, height: 20 }
      ],
      enemies: [
        { x: 700, y: 0, type: 'goomba' },
        { x: 850, y: 120, type: 'goomba' },
        { x: 1400, y: 0, type: 'goomba' },
        { x: 1700, y: 120, type: 'goomba' },
        { x: 2200, y: 160, type: 'goomba' },
        { x: 2600, y: 180, type: 'goomba' }
      ],
      bonuses: [
        { x: 600, y: 160, type: 'carrot' },
        { x: 900, y: 320, type: 'potato' },
        { x: 1500, y: 240, type: 'carrot' },
        { x: 2300, y: 200, type: 'potato' },
        { x: 2700, y: 220, type: 'carrot' }
      ],
      goal: { x: 2800, y: 0, width: 40, height: 120 }
    }
    ,
    // Niveau¬†6¬†: un parcours sinueux avec des segments de sol plus courts et
    // de nombreuses plateformes interm√©diaires.  Ce niveau demande de
    // jongler entre les sauts et les atterrissages sur des plateformes en
    // hauteur tout en √©vitant plusieurs goombas.  La largeur √©tendue
    // augmente la dur√©e du niveau.
    {
      groundHeight: 80,
      width: 3200,
      startX: 50,
      platforms: [
        { x: 0, y: 0, width: 400, height: 20 },
        { x: 500, y: 0, width: 250, height: 20 },
        { x: 900, y: 0, width: 300, height: 20 },
        { x: 1400, y: 0, width: 300, height: 20 },
        { x: 1900, y: 0, width: 350, height: 20 },
        // plateformes a√©riennes
        { x: 650, y: 150, width: 160, height: 20 },
        { x: 1150, y: 200, width: 150, height: 20 },
        { x: 1700, y: 170, width: 170, height: 20 },
        { x: 2300, y: 140, width: 180, height: 20 },
        { x: 2600, y: 200, width: 140, height: 20 }
      ],
      enemies: [
        { x: 600, y: 0, type: 'goomba' },
        { x: 1000, y: 0, type: 'goomba' },
        { x: 1500, y: 0, type: 'goomba' },
        { x: 2100, y: 0, type: 'goomba' },
        { x: 2600, y: 170, type: 'goomba' }
      ],
      bonuses: [
        { x: 580, y: 170, type: 'carrot' },
        { x: 1200, y: 230, type: 'potato' },
        { x: 1750, y: 200, type: 'carrot' },
        { x: 2400, y: 180, type: 'potato' },
        { x: 2800, y: 220, type: 'carrot' }
      ],
      goal: { x: 3000, y: 0, width: 40, height: 120 }
    }
    ,
    // Niveau¬†7¬†: niveau tournant o√π le capy doit monter sur des tours de
    // plateformes dispos√©es √† diff√©rentes hauteurs.  De nombreux trous
    // s√©parent les segments de sol, obligeant le joueur √† ma√Ætriser le
    // timing de ses sauts.  Des bonus g√©n√©reux r√©compensent les prises de
    // risque.
    {
      groundHeight: 80,
      width: 3400,
      startX: 50,
      platforms: [
        { x: 0, y: 0, width: 350, height: 20 },
        { x: 450, y: 0, width: 300, height: 20 },
        { x: 900, y: 0, width: 250, height: 20 },
        { x: 1300, y: 0, width: 300, height: 20 },
        { x: 1750, y: 0, width: 350, height: 20 },
        // Tours verticales
        { x: 700, y: 140, width: 140, height: 20 },
        { x: 700, y: 220, width: 140, height: 20 },
        { x: 1500, y: 160, width: 150, height: 20 },
        { x: 1500, y: 240, width: 150, height: 20 },
        { x: 2200, y: 180, width: 160, height: 20 },
        { x: 2200, y: 260, width: 160, height: 20 }
      ],
      enemies: [
        { x: 500, y: 0, type: 'goomba' },
        { x: 800, y: 160, type: 'goomba' },
        { x: 1200, y: 0, type: 'goomba' },
        { x: 1600, y: 200, type: 'goomba' },
        { x: 2100, y: 0, type: 'goomba' },
        { x: 2500, y: 260, type: 'goomba' }
      ],
      bonuses: [
        { x: 650, y: 180, type: 'carrot' },
        { x: 900, y: 260, type: 'potato' },
        { x: 1550, y: 220, type: 'carrot' },
        { x: 2250, y: 300, type: 'potato' },
        { x: 2750, y: 280, type: 'carrot' }
      ],
      goal: { x: 3200, y: 0, width: 40, height: 120 }
    }
    ,
    // Niveau¬†8¬†: un dernier niveau √©pique avec une alternance de sol et de
    // longues plateformes suspendues √† haute altitude.  Les trous sont
    // nombreux et les goombas apparaissent √† la fois au sol et en hauteur.
    // La largeur de 3600 px rend ce niveau particuli√®rement long et
    // exigeant.
    {
      groundHeight: 80,
      width: 3600,
      startX: 50,
      platforms: [
        { x: 0, y: 0, width: 400, height: 20 },
        { x: 550, y: 0, width: 300, height: 20 },
        { x: 950, y: 0, width: 350, height: 20 },
        { x: 1450, y: 0, width: 300, height: 20 },
        { x: 1950, y: 0, width: 350, height: 20 },
        // Plates‚Äëformes suspendues tr√®s hautes pour un d√©fi vertical
        { x: 700, y: 220, width: 160, height: 20 },
        { x: 1100, y: 260, width: 150, height: 20 },
        { x: 1500, y: 300, width: 170, height: 20 },
        { x: 2100, y: 240, width: 160, height: 20 },
        { x: 2500, y: 280, width: 150, height: 20 },
        { x: 3000, y: 200, width: 170, height: 20 }
      ],
      enemies: [
        { x: 600, y: 0, type: 'goomba' },
        { x: 950, y: 0, type: 'goomba' },
        { x: 1250, y: 260, type: 'goomba' },
        { x: 1750, y: 300, type: 'goomba' },
        { x: 2150, y: 240, type: 'goomba' },
        { x: 2750, y: 280, type: 'goomba' },
        { x: 3200, y: 200, type: 'goomba' }
      ],
      bonuses: [
        { x: 650, y: 250, type: 'carrot' },
        { x: 1200, y: 300, type: 'potato' },
        { x: 1600, y: 340, type: 'carrot' },
        { x: 2300, y: 260, type: 'potato' },
        { x: 2800, y: 300, type: 'carrot' },
        { x: 3300, y: 230, type: 'potato' }
      ],
      goal: { x: 3400, y: 0, width: 40, height: 120 }
    }
  ];
  // Les niveaux suppl√©mentaires sont g√©n√©r√©s de mani√®re proc√©durale.  Nous
  // conservons uniquement le premier niveau pr√©‚Äëd√©fini et remplissons le
  // reste du tableau avec des niveaux cr√©√©s √† la vol√©e via
  // generateProceduralLevel().  Cette nouvelle g√©n√©ration introduit des
  // plateformes al√©atoires, des trous, des pipes, des ennemis vari√©s et
  // des niveaux sous-marins.  Le nombre total de niveaux reste identique
  // (45) pour pr√©server la progression.
  {
    const firstLevel = levels[0];
    levels.length = 1;
    for (let i = 1; i < 45; i++) {
      levels.push(generateProceduralLevel(i));
    }
  }

  /**
   * G√©n√®re un niveau proc√©dural pour Super¬†Capy.  Chaque niveau cr√©√©
   * contient un m√©lange de segments de sol avec des trous, de plates‚Äëformes
   * a√©riennes, d'ennemis vari√©s et parfois de tuyaux menant √† des zones
   * √©loign√©es.  Tous les 5 niveaux, un niveau est marqu√© comme
   * sous‚Äëmarin.  Dans ces niveaux, il n'y a pas de sol continu et le
   * joueur se d√©place librement dans l'eau en √©vitant poissons et mines.
   * @param {number} index Indice du niveau (1‚Äëbased)
   * @returns {object} Objet repr√©sentant un niveau
   */
  function generateProceduralLevel(index) {
    const underwater = (index % 5 === 0);
    // Largeur du niveau : augmente avec l'indice et ajoute une petite
    // variation al√©atoire pour √©viter la monotonie.  La largeur reste
    // suffisamment grande pour permettre un gameplay int√©ressant.
    const baseWidth = 2200 + index * 100;
    const widthVariation = 200 + Math.random() * 200;
    const levelWidthValue = baseWidth + widthVariation;
    const level = {
      underwater: underwater,
      groundHeight: underwater ? 0 : 80,
      width: levelWidthValue,
      platforms: [],
      enemies: [],
      bonuses: [],
      pipes: [],
      // Limite verticale dans les niveaux aquatiques.  La valeur est
      // utilis√©e pour contraindre la hauteur maximale (capybara.y + height)
      // de l'avatar.  Dans les niveaux terrestres, maxY est omis.
      maxY: underwater ? 300 + Math.random() * 100 : undefined,
    };
    // D√©terminer la position de d√©part et la direction.  Par d√©faut, on
    // commence √† gauche ; une fois sur quatre, on commence √† droite pour
    // varier le parcours.
    const directionLeft = (index % 4 === 1);
    level.startX = directionLeft ? levelWidthValue - 200 : 50;
    if (directionLeft) level.direction = 'left';
    // D√©finir la position de la fin du niveau (goal).  Le drapeau est
    // plac√© √† environ 200¬†px de la fin dans la direction oppos√©e au
    // d√©part.
    level.goal = directionLeft
      ? { x: 100, y: 0, width: 40, height: underwater ? 80 : 120 }
      : { x: levelWidthValue - 200, y: 0, width: 40, height: underwater ? 80 : 120 };
    if (!underwater) {
      // Construction du sol par segments entrecoup√©s de trous.  Nous
      // garantissons un parcours r√©alisable en limitant la longueur des
      // trous et en ajoutant occasionnellement des plates‚Äëformes qui
      // permettent de franchir les gaps plus larges.
      let xPos = 0;
      while (xPos < levelWidthValue - 300) {
        // Longueur du segment de sol
        const segW = 250 + Math.random() * 250; // 250 √† 500
        level.platforms.push({ x: xPos, y: 0, width: segW, height: 30 });
        // Plates‚Äëformes a√©riennes au-dessus de ce segment avec une
        // probabilit√© de 30¬†%
        if (Math.random() < 0.3) {
          const platW = 100 + Math.random() * 120;
          // Position al√©atoire au-dessus du segment mais sans d√©passer la
          // largeur du niveau
          const px = xPos + (segW - platW) * Math.random();
          const py = 90 + Math.random() * 150;
          level.platforms.push({ x: px, y: py, width: platW, height: 20 });
        }
        xPos += segW;
        // Largeur du trou (gap) : entre 80 et 180¬†px.  Pour les grands
        // trous (>150¬†px), ajouter une plate‚Äëforme qui les surplombe afin
        // de garantir qu'ils soient franchissables.
        const gapW = 80 + Math.random() * 100; // 80 √† 180
        if (gapW > 150) {
          const platW2 = 120 + Math.random() * 80;
          const px2 = xPos + (gapW - platW2) / 2;
          const py2 = 120 + Math.random() * 120;
          level.platforms.push({ x: px2, y: py2, width: platW2, height: 20 });
        }
        xPos += gapW;
      }
      // Ajouter quelques plates‚Äëformes suppl√©mentaires dispers√©es
      const extraCount = 2 + Math.floor(Math.random() * 4);
      for (let i = 0; i < extraCount; i++) {
        const platW = 80 + Math.random() * 140;
        const px = 200 + Math.random() * (levelWidthValue - 400);
        const py = 90 + Math.random() * 200;
        level.platforms.push({ x: px, y: py, width: platW, height: 20 });
      }
      // G√©n√©rer des ennemis.  Leur nombre augmente l√©g√®rement avec l'indice.
      const enemyCount = 3 + Math.floor(Math.random() * 3) + Math.floor(index / 8);
      for (let i = 0; i < enemyCount; i++) {
        const ex = 150 + Math.random() * (levelWidthValue - 300);
        // Choisir une hauteur : sol ou plateforme.  70¬†% des ennemis au sol.
        let ey = 0;
        if (Math.random() < 0.3 && level.platforms.length > 0) {
          // Choisir une plate‚Äëforme au hasard et placer l'ennemi sur le haut de la plate‚Äëforme
          const p = level.platforms[Math.floor(Math.random() * level.platforms.length)];
          // Dans notre syst√®me de coordonn√©es, p.y repr√©sente le bord inf√©rieur de la plate‚Äëforme
          // (distance depuis le sol).  Pour que les ennemis se tiennent au dessus et non au
          // milieu de la plate‚Äëforme, on ajoute la hauteur de la plate‚Äëforme.  La hauteur
          // standard est de 20¬†px.  On utilise p.height au cas o√π cela √©voluerait.
          ey = p.y + (p.height || 20);
        }
        // Choisir un type d'ennemi.  goomba¬†: 50¬†%, koopa¬†: 20¬†%, shell¬†: 15¬†%,
        // mine¬†: 15¬†% (pour diversifier les obstacles m√™me hors de l'eau).
        const r = Math.random();
        let type;
        if (r < 0.5) type = 'goomba';
        else if (r < 0.7) type = 'koopa';
        else if (r < 0.85) type = 'shell';
        else type = 'mine';
        level.enemies.push({ x: ex, y: ey, type: type });
      }
      // Bonus (carottes et patates)
      const bonusCount = 3 + Math.floor(Math.random() * 3);
      for (let i = 0; i < bonusCount; i++) {
        const bx = 200 + Math.random() * (levelWidthValue - 400);
        // Positionner le bonus soit au sol soit au-dessus d'une plate‚Äëforme
        let by = 0;
        if (Math.random() < 0.4 && level.platforms.length > 0) {
          const p = level.platforms[Math.floor(Math.random() * level.platforms.length)];
          by = p.y + 40;
        } else {
          by = 120 + Math.random() * 200;
        }
        const type = Math.random() < 0.5 ? 'carrot' : 'potato';
        level.bonuses.push({ x: bx, y: by, type: type });
      }
      // Probabilit√© d'ajouter une paire de tuyaux pour cr√©er un raccourci.
      if (Math.random() < 0.4) {
        // Deux positions al√©atoires √©loign√©es l'une de l'autre
        const px1 = 200 + Math.random() * (levelWidthValue * 0.4);
        const px2 = levelWidthValue * 0.6 + Math.random() * (levelWidthValue * 0.3);
        const ph = 80 + Math.random() * 80;
        level.pipes.push({ x: px1, y: 0, height: ph, destX: px2, destY: 0 });
        level.pipes.push({ x: px2, y: 0, height: ph, destX: px1, destY: 0 });
      }
    } else {
      // Construction d'un niveau sous‚Äëmarin.  Aucune plateforme au sol,
      // seulement des ennemis et quelques bonus pour guider le joueur.
      // La hauteur maximale est d√©j√† d√©finie.  G√©n√©rer des poissons et des
      // mines √† des positions al√©atoires dans la zone.
      const fishCount = 4 + Math.floor(Math.random() * 4);
      for (let i = 0; i < fishCount; i++) {
        const fx = 150 + Math.random() * (levelWidthValue - 300);
        const fy = 80 + Math.random() * ((level.maxY || 300) - 150);
        const type = Math.random() < 0.7 ? 'fish' : 'mine';
        level.enemies.push({ x: fx, y: fy, type: type });
      }
      // Quelques bonus sous forme de bulles (carottes/patates)
      const bonusCount2 = 3 + Math.floor(Math.random() * 3);
      for (let i = 0; i < bonusCount2; i++) {
        const bx = 200 + Math.random() * (levelWidthValue - 400);
        const by = 80 + Math.random() * ((level.maxY || 300) - 150);
        const type = Math.random() < 0.5 ? 'carrot' : 'potato';
        level.bonuses.push({ x: bx, y: by, type: type });
      }
      // Ajouter √©ventuellement un tuyau menant √† un autre endroit de la
      // section aquatique, pour varier le parcours.  Le tuyau √©merge du
      // fond marin (y=0) et conduit √† une zone sup√©rieure.
      if (Math.random() < 0.3) {
        const px1 = 200 + Math.random() * (levelWidthValue * 0.4);
        const px2 = levelWidthValue * 0.6 + Math.random() * (levelWidthValue * 0.3);
        const ph = 60 + Math.random() * 60;
        // Les tuyaux sous l'eau ne d√©passent pas la surface, on limite la
        // hauteur au quart de maxY
        const maxH = (level.maxY || 300) * 0.25;
        const h1 = Math.min(ph, maxH);
        const h2 = Math.min(ph, maxH);
        level.pipes.push({ x: px1, y: 0, height: h1, destX: px2, destY: level.maxY * 0.5 || 150 });
        level.pipes.push({ x: px2, y: 0, height: h2, destX: px1, destY: level.maxY * 0.5 || 150 });
      }
    }
    return level;
  }
  let currentLevelIndex = 0;
  // Permettre de choisir le niveau via un param√®tre d'URL (?level=1).  Si
  // pr√©sent et valide, la variable currentLevelIndex est d√©finie
  // correspondamment (en 0‚Äëbased).  Sinon, elle reste √† z√©ro.
  (function parseLevelFromURL() {
    try {
      const params = new URLSearchParams(window.location.search);
      const lvl = parseInt(params.get('level'), 10);
      if (!isNaN(lvl) && lvl >= 1 && lvl <= levels.length) {
        currentLevelIndex = lvl - 1;
      }
    } catch (e) {}
  })();
  let groundHeight = levels[0].groundHeight;
  let levelWidth = levels[0].width;

  // Entit√©s courantes
  let platforms = [];
  let enemies = [];
  let bonuses = [];
  let goal = null;

  // Variables d'indication de direction.  Lors du chargement d'un niveau,
  // arrowStartTime est initialis√© √† la valeur actuelle de performance.now().
  // Une fl√®che clignotante indique au joueur s'il faut aller vers la
  // droite ou vers la gauche.  Apr√®s arrowDuration millisecondes, la
  // fl√®che dispara√Æt.  arrowDirection vaut 'right' ou 'left' selon la
  // position du goal par rapport au point de d√©part.  Ces valeurs sont
  // √©galement utilis√©es pour dessiner la fl√®che directement sur le canvas
  // afin d'√©viter les soucis de superposition d'√©l√©ments HTML.  La
  // variable arrowOpacity n'est plus n√©cessaire car l'opacit√© est g√©r√©e
  // via ctx.globalAlpha dans la fonction draw().
  let arrowStartTime = 0;
  // Dur√©e d'affichage de la fl√®che directionnelle en millisecondes.
  // L'utilisateur avait constat√© que la fl√®che restait ind√©finiment car
  // arrowDuration √©tait r√©gl√© √† Infinity pour le d√©bogage.  Nous le
  // remettons maintenant √† 3500¬†ms (3,5¬†s) pour respecter l'exigence de
  // disparition rapide de la fl√®che.  Apr√®s cette dur√©e, la fl√®che
  // directionnelle dispara√Æt automatiquement.
  // Dur√©e d'affichage de la fl√®che directionnelle en millisecondes.
  // La fl√®che appara√Æt pendant 3,5¬†secondes en d√©but de niveau puis
  // dispara√Æt.  Elle clignote tout au long de cette p√©riode.
  const arrowDuration = 3500;
  let arrowDirection = 'right';

  // √âl√©ments d√©coratifs¬†: nuages et oiseaux.  Ces objets sont
  // facultatifs et servent √† enrichir le d√©cor pour donner une
  // impression de mouvement m√™me lorsqu'il n'y a pas d'obstacles √†
  // l'√©cran.
  const clouds = [];
  const birds = [];

  // Classe repr√©sentant un nuage.  Les nuages se d√©placent plus
  // lentement que la cam√©ra afin de cr√©er un effet de parallaxe.
  class Cloud {
    constructor(x, y, scale) {
      this.x = x;
      this.y = y;
      this.scale = scale;
      // Les nuages d√©rivent lentement vers la gauche en plus du parallaxe
      this.speed = 0.05 + Math.random() * 0.05;
    }
    update() {
      // D√©placer l√©g√®rement le nuage vers la gauche pour l'animer.  La
      // vitesse est multipli√©e par le facteur global afin de conserver
      // une allure constante ind√©pendamment du taux de rafra√Æchissement.
      this.x -= this.speed * speedFactor;
      // Boucler si le nuage sort trop √† gauche du niveau.  Nous ne
      // d√©pendons plus du nombre de frames pour d√©terminer la vitesse
      // d'encha√Ænement¬†: la position se met √† jour en temps r√©el via
      // speedFactor.  Lorsqu'un nuage quitte l'√©cran, on le replace √†
      // droite avec un l√©ger d√©calage al√©atoire.
      if (this.x < -100) {
        this.x = levelWidth + 200 * Math.random();
      }
    }
    draw(cameraX) {
      // Position du nuage avec parallaxe¬†: se d√©place plus lentement
      const parallaxFactor = 0.3;
      const screenX = this.x - cameraX * parallaxFactor;
      const screenY = height - groundHeight - this.y;
      ctx.save();
      ctx.translate(screenX, screenY);
      ctx.scale(this.scale, this.scale);
      ctx.fillStyle = 'rgba(255,255,255,0.8)';
      // Dessiner un nuage avec plusieurs cercles
      ctx.beginPath();
      ctx.arc(0, 0, 40, 0, Math.PI * 2);
      ctx.arc(30, -10, 35, 0, Math.PI * 2);
      ctx.arc(-30, -10, 30, 0, Math.PI * 2);
      ctx.fill();
      ctx.restore();
    }
  }

  // Classe repr√©sentant un oiseau volant.  Les oiseaux volent √† une
  // vitesse mod√©r√©e vers la gauche.  Ils sont r√©initialis√©s au-del√†
  // du bord droit lorsque hors de l'√©cran.  Dessin simple en forme de V.
  class BirdDeco {
    constructor(x, y, speed) {
      this.x = x;
      this.y = y;
      this.speed = speed;
      this.wingSpan = 28;
      this.life = 0;
    }
    update() {
      // D√©placement de l'oiseau vers la gauche.  Le facteur global
      // garantit une vitesse constante quel que soit le rafra√Æchissement
      // r√©el de l'√©cran.  Le compteur de vie sert uniquement √†
      // d'√©ventuelles animations √† l'avenir.
      this.x -= this.speed * speedFactor;
      this.life += speedFactor;
    }
    draw(cameraX) {
      const parallaxFactor = 0.5;
      const screenX = this.x - cameraX * parallaxFactor;
      const screenY = height - groundHeight - this.y;
      ctx.save();
      ctx.strokeStyle = '#5d4037';
      ctx.lineWidth = 2;
      ctx.beginPath();
      // Forme simplifi√©e : oiseau en V
      ctx.moveTo(screenX, screenY);
      ctx.lineTo(screenX + this.wingSpan / 2, screenY + 10);
      ctx.lineTo(screenX + this.wingSpan, screenY);
      ctx.stroke();
      ctx.restore();
    }
  }

  // Initialiser des nuages espac√©s sur toute la largeur du niveau.  On
  // appelle cette fonction lors du chargement du niveau afin d'adapter
  // l'environnement √† la longueur du niveau.  Les hauteurs sont
  // r√©parties dans la moiti√© sup√©rieure de l'√©cran.
  function spawnClouds() {
    clouds.length = 0;
    const count = Math.max(4, Math.floor(levelWidth / 500));
    for (let i = 0; i < count; i++) {
      const x = Math.random() * levelWidth;
      const y = 200 + Math.random() * 200;
      const scale = 0.5 + Math.random() * 0.5;
      clouds.push(new Cloud(x, y, scale));
    }
  }

  // Gestion des oiseaux d√©coratifs.  Les oiseaux sont ajout√©s
  // al√©atoirement pendant l'update et supprim√©s lorsqu'ils sortent de
  // l'√©cran sur la gauche.  La vitesse et l'altitude sont variables.
  function spawnBird() {
    const x = levelWidth + 100;
    const y = 200 + Math.random() * 200;
    const speed = 0.7 + Math.random() * 0.5;
    birds.push(new BirdDeco(x, y, speed));
  }

  // Chargement du niveau en cours.  Cette fonction convertit les donn√©es
  // brutes en instances de classes pour les plateformes, ennemis et bonus.
  function loadLevel(index) {
    const lvl = levels[index];
    groundHeight = lvl.groundHeight;
    levelWidth = lvl.width;
    // Convertir les plateformes en instances de Platform.  Augmenter la
    // hauteur des plateformes au sol pour offrir une meilleure marge :
    // minimum 30¬†px.  Les plateformes a√©riennes conservent leur hauteur.
    platforms = lvl.platforms.map((p) => {
      const h = (p.y === 0 ? Math.max(30, p.height) : p.height);
      return new Platform(p.x, p.y, p.width, h);
    });
    // Pour chaque ennemi, associer la plateforme sous ses pieds afin qu'il
    // puisse rebondir aux extr√©mit√©s.  On cherche la premi√®re plateforme
    // dont la zone horizontale englobe l'ennemi et dont la hauteur co√Øncide
    // avec l'ennemi.  Si aucune plateforme n'est trouv√©e, on utilise
    // simplement la largeur du niveau comme limite.
    enemies = lvl.enemies.map((e) => {
      let leftBound = 0;
      let rightBound = levelWidth;
      for (const plat of lvl.platforms) {
        // Les ennemis plac√©s sur les plateformes utilisent une coordonn√©e y correspondant
        // au dessus de la plate-forme (plat.y + plat.height).  Ajuster la condition
        // pour trouver la plate-forme correspondante et calculer les bornes de
        // d√©placement.
        const platTop = plat.y + (plat.height || 20);
        if (e.y === platTop && e.x >= plat.x && e.x <= plat.x + plat.width) {
          leftBound = plat.x;
          rightBound = plat.x + plat.width;
          break;
        }
      }
      return new Enemy(e.x, e.y, e.type, leftBound, rightBound);
    });
    // Lors du chargement du niveau, sp√©cifier le type de chaque bonus
    bonuses = lvl.bonuses.map((b) => new Bonus(b.x, b.y, b.type));
    goal = new Goal(lvl.goal.x, lvl.goal.y, lvl.goal.width, lvl.goal.height);

    // G√©n√©rer les tuyaux du niveau, le cas √©ch√©ant.  Chaque entr√©e de
    // lvl.pipes d√©finit x, y, height et √©ventuellement des coordonn√©es de
    // destination.  Convertir ces objets en instances de Pipe afin de
    // pouvoir les dessiner et g√©rer les collisions.
    pipes = (lvl.pipes || []).map((p) => new Pipe(p.x, p.y, p.height, p.destX, p.destY));
    // Ajouter des plateformes sur le dessus des tuyaux pour permettre de
    // marcher dessus.  Chaque tuyau est transform√© en petit plateau de
    // 5¬†px d'√©paisseur situ√© √† sa hauteur finale.
    for (const pipe of pipes) {
      platforms.push(new Platform(pipe.x, pipe.y + pipe.height, pipe.width, 5));
    }
    // R√©initialiser la trace du capybara √† l'entr√©e d'un niveau.
    trailSegments = [];
    // Hauteur maximale pour les niveaux sous‚Äëmarins.  Si le niveau
    // sp√©cifie maxY, l'utiliser ; sinon on met 0 pour indiquer l'absence
    // de limite verticale sp√©cifique.  Ce champ est utilis√© dans
    // Player.update() lorsque lvl.underwater est vrai.
    levelMaxY = lvl.maxY || 0;
    // R√©initialiser les √©l√©ments d√©coratifs
    spawnClouds();
    birds.length = 0;

    // D√©terminer la direction du niveau pour afficher la fl√®che
    arrowStartTime = performance.now();
    // Utiliser la direction d√©clar√©e explicitement dans le niveau si elle
    // existe.  Sinon, comparer la position du goal √† la position de d√©part
    // pour choisir left ou right.
    if (lvl.direction) {
      arrowDirection = lvl.direction;
    } else {
      const startX = (lvl.startX !== undefined ? lvl.startX : 50);
      arrowDirection = (lvl.goal.x >= startX) ? 'right' : 'left';
    }

    // Mettre √† jour la fl√®che directionnelle HTML.  On choisit le symbole en
    // fonction de la direction du niveau et on affiche la fl√®che.  Un
    // timer se charge de la masquer apr√®s `arrowDuration` millisecondes.
    if (directionArrowEl) {
      directionArrowEl.textContent = arrowDirection === 'right' ? '‚Üí' : '‚Üê';
      directionArrowEl.style.display = 'block';
      // Annuler tout timer pr√©c√©dent pour √©viter des chevauchements
      if (arrowTimeoutId) clearTimeout(arrowTimeoutId);
      arrowTimeoutId = setTimeout(() => {
        directionArrowEl.style.display = 'none';
      }, arrowDuration);
    }
  }

  // Classe du joueur
  class Player {
    constructor() {
      // Augmenter les dimensions du h√©ros pour qu‚Äôil soit plus visible √† l‚Äô√©cran.
      // Les valeurs sont augment√©es d‚Äôenviron 40¬†% par rapport √† la version
      // pr√©c√©dente (70¬†px de large et 56¬†px de haut) afin que Super¬†Capy
      // corresponde mieux √† sa stature h√©ro√Øque tout en conservant le
      // ratio original (5:4).  Ces dimensions sont ensuite utilis√©es
      // directement lors du dessin de l‚Äôimage d√©tour√©e.
      this.width = 70;
      // √âtendre le h√©ros en hauteur pour lui donner une allure plus grande
      // sans modifier sa largeur.  On passe de 56¬†px √† 70¬†px de haut.
      this.height = 70;
      this.reset();
      // Compteur de sauts pour autoriser un double saut.  La valeur
      // s‚Äôincr√©mente √† chaque saut et se r√©initialise lorsque le
      // capybara touche le sol ou une plateforme.
      this.jumpCount = 0;
      // Temps d'invuln√©rabilit√© apr√®s un respawn (en nombre de frames).  Pendant
      // cette p√©riode, les collisions avec les ennemis sont ignor√©es pour
      // emp√™cher la mort imm√©diate √† la sortie de la zone de d√©part.  Voir
      // l'utilisation dans update() et dans la boucle de collisions plus bas.
      this.spawnTimer = 0;
      // Dur√©e pendant laquelle le joueur peut traverser les plateformes
      // a√©riennes.  D√©cr√©ment√©e √† chaque frame.  Lorsque > 0, les
      // collisions avec les plateformes de hauteur > 0 sont ignor√©es.
      this.dropThroughTimer = 0;

      // Dur√©e pendant laquelle le joueur effectue une rotation en sortant
      // d'un tuyau de t√©l√©portation.  Lorsque >¬†0, Player.draw() applique
      // une rotation progressive afin de simuler une sortie anim√©e du
      // tuyau.  Cette valeur est d√©cr√©ment√©e dans Player.update().
      this.spinTimer = 0;
    }
    reset() {
      // D√©part au d√©but du niveau, au sol
      // Utiliser la position de d√©part d√©finie par le niveau.  Si aucune
      // valeur n'est fournie, retomber √† 50.
      const lvl = levels[currentLevelIndex] || {};
      this.x = (lvl.startX !== undefined ? lvl.startX : 50);
      // D√©finir une zone de protection horizontale √† partir du point de
      // d√©part.  Tant que le joueur se trouve dans cette zone (~150¬†px,
      // √©quivalent √† environ trois blocs de largeur), les collisions avec
      // les ennemis seront ignor√©es.  Ceci √©vite de mourir instantan√©ment
      // lorsque des ennemis sont plac√©s pr√®s de la zone de d√©part sur
      // certains niveaux.
      this.spawnSafeX = this.x + 150;
      this.y = 0;
      this.velX = 0;
      this.velY = 0;
      this.isOnGround = false;
      this.jumpCount = 0;
      // R√©activer la protection de spawn pendant ~90¬†frames (‚âà1.5¬†s √† 60¬†FPS)
      this.spawnTimer = 90;

      // R√©initialiser le temporisateur de rotation lors de la sortie de
      // tuyau.  Ceci garantit que l'animation ne persiste pas d'un
      // niveau √† l'autre.
      this.spinTimer = 0;
    }
    update() {
      // Ne rien faire si le jeu n'est pas en cours
      if (state !== 'playing') return;
      const lvl = levels[currentLevelIndex] || {};

      // Diminuer la dur√©e de l'animation de sortie de tuyau.  Cette
      // variable est utilis√©e pour l'animation de rotation dans draw().
      if (this.spinTimer > 0) {
        this.spinTimer -= speedFactor;
        if (this.spinTimer < 0) this.spinTimer = 0;
      }
      // D√©cr√©menter le timer de travers√©e des plateformes si actif
      if (this.dropThroughTimer > 0) {
        this.dropThroughTimer -= 1;
        if (this.dropThroughTimer < 0) this.dropThroughTimer = 0;
      }
      // Gestion sp√©cifique aux niveaux sous‚Äëmarins : pas de gravit√© et
      // d√©placement libre en X et Y avec des vitesses r√©duites.  Le
      // double saut est d√©sactiv√© car la nage utilise les touches.
      if (lvl.underwater) {
        const sf = speedFactor;
        // Param√®tres adapt√©s pour la nage : acc√©l√©ration et vitesse max r√©duites
        const maxSpeed = 3;
        const accel = 0.35;
        const friction = 0.85;
        // Mouvements horizontaux
        if (keys.left) {
          this.velX = Math.max(this.velX - accel * sf, -maxSpeed);
        } else if (keys.right) {
          this.velX = Math.min(this.velX + accel * sf, maxSpeed);
        } else {
          this.velX *= Math.pow(friction, sf);
          if (Math.abs(this.velX) < 0.05) this.velX = 0;
        }
        // Mouvements verticaux (sous l'eau on peut monter ou descendre)
        if (keys.up) {
          this.velY = Math.min(this.velY + accel * sf, maxSpeed);
        } else if (keys.down) {
          this.velY = Math.max(this.velY - accel * sf, -maxSpeed);
        } else {
          this.velY *= Math.pow(friction, sf);
          if (Math.abs(this.velY) < 0.05) this.velY = 0;
        }
        // Mettre √† jour la position selon le facteur de vitesse
        this.x += this.velX * sf;
        this.y += this.velY * sf;
        // D√©cr√©menter le timer d'invuln√©rabilit√©
        if (this.spawnTimer > 0) {
          this.spawnTimer -= sf;
          if (this.spawnTimer < 0) this.spawnTimer = 0;
        }
        // Emp√™cher de sortir du niveau horizontalement
        if (this.x < 0) {
          this.x = 0;
          this.velX = 0;
        }
        if (this.x + this.width > levelWidth) {
          this.x = levelWidth - this.width;
          this.velX = 0;
        }
        // Emp√™cher de sortir verticalement.  La coordonn√©e y correspond au
        // bas du capybara (0 = sol).  Sous l'eau, y ne doit pas √™tre
        // n√©gatif (descendre sous le sol) ni d√©passer la limite max.
        if (this.y < 0) {
          this.y = 0;
          if (this.velY < 0) this.velY = 0;
        }
        const maxY = levelMaxY || lvl.maxY || 300;
        // La limite sup√©rieure est √† maxY : la t√™te du capybara ne doit pas
        // d√©passer maxY.  Comme y stocke la position du bas, on teste
        // this.y + this.height.
        if (this.y + this.height > maxY) {
          this.y = maxY - this.height;
          if (this.velY > 0) this.velY = 0;
        }
        // G√©rer les collisions avec les plateformes m√™me sous l'eau : le
        // capybara peut se poser sur des plateformes et ne doit pas les
        // traverser.  Sous l'eau, on v√©rifie que l'on se d√©place vers le
        // bas avant de corriger la position, comme dans la version
        // terrestre.
        if (this.velY < 0) {
          const prevY = this.y - this.velY * sf;
          for (const p of platforms) {
            // Ignorer les plateformes en hauteur lorsqu'un drop through est actif
            if (this.dropThroughTimer > 0 && p.y > 0) continue;
            const top = p.y + p.height;
            if (prevY >= top && this.y <= top) {
              if (this.x + this.width > p.x && this.x < p.x + p.width) {
                this.y = top;
                this.velY = 0;
                break;
              }
            }
          }
        }
        // Pas de gestion de isOnGround sous l'eau
        this.isOnGround = false;
        return;
      }
      const prevY = this.y;
      // Appliquer le facteur de vitesse global.  Cela permet de conserver un
      // comportement coh√©rent quel que soit le taux de rafra√Æchissement.
      const sf = speedFactor;
      // Constantes de mouvement de base (par frame √† 60¬†Hz)
      const baseMaxSpeed = 4.5;
      const baseAccel = 0.5;
      const baseFriction = 0.85;
      const baseGravity = -0.35;
      // Mouvements horizontaux
      if (keys.left) {
        // Acc√©l√©rer vers la gauche
        this.velX = Math.max(this.velX - baseAccel * sf, -baseMaxSpeed);
      } else if (keys.right) {
        // Acc√©l√©rer vers la droite
        this.velX = Math.min(this.velX + baseAccel * sf, baseMaxSpeed);
      } else {
        // Appliquer un frottement exponentiel en fonction du facteur de vitesse
        // pour ralentir progressivement lorsque aucune touche n'est press√©e.
        this.velX *= Math.pow(baseFriction, sf);
        if (Math.abs(this.velX) < 0.05) this.velX = 0;
      }
      // Gravit√©¬†: ajouter la composante verticale
      this.velY += baseGravity * sf;
      // Mettre √† jour la position en tenant compte du facteur de vitesse
      this.x += this.velX * sf;
      this.y += this.velY * sf;
      // D√©cr√©menter le timer d'invuln√©rabilit√© en fonction de la vitesse
      if (this.spawnTimer > 0) {
        this.spawnTimer -= sf;
        if (this.spawnTimer < 0) this.spawnTimer = 0;
      }
      this.isOnGround = false;
      // Emp√™cher de sortir du niveau horizontalement
      if (this.x < 0) {
        this.x = 0;
        this.velX = 0;
      }
      if (this.x + this.width > levelWidth) {
        this.x = levelWidth - this.width;
        this.velX = 0;
      }
      // Collision avec le sol (y <= 0 -> sol)
      if (this.y < 0) {
        this.y = 0;
        if (this.velY < 0) this.velY = 0;
        this.isOnGround = true;
        this.jumpCount = 0;
      }
      // Collision avec les plateformes.  On ne v√©rifie la collision qu'√† la descente
      if (this.velY < 0) {
        for (const p of platforms) {
          // Ignorer les plateformes a√©riennes lorsque le drop through est actif
          if (this.dropThroughTimer > 0 && p.y > 0) continue;
          const platformTop = p.y + p.height;
          // V√©rifier que l'on est pass√© du dessus au-dessous
          if (prevY >= platformTop && this.y <= platformTop) {
            // Chevauchement horizontal
            if (this.x + this.width > p.x && this.x < p.x + p.width) {
              // Poser le joueur sur la plateforme
              this.y = platformTop;
              this.velY = 0;
              this.isOnGround = true;
              this.jumpCount = 0;
              break;
            }
          }
        }
      }
    }
    jump() {
      if (state !== 'playing') return;
      // D√©sactiver le saut lorsqu'on est dans un niveau aquatique.  Sous
      // l'eau, le joueur se d√©place verticalement en utilisant les
      // touches haut et bas et la gravit√© n'est pas appliqu√©e.
      if (levels[currentLevelIndex] && levels[currentLevelIndex].underwater) {
        return;
      }
      // Autoriser un double saut¬†: le joueur peut sauter jusqu‚Äô√† deux
      // fois avant de retoucher le sol.  La premi√®re et la seconde
      // impulsion utilisent la m√™me force pour donner une sensation de
      // ma√Ætrise.  L‚Äôatterrissage r√©initialise jumpCount.
      // Force de saut utilis√©e pour chaque impulsion.  Cette valeur a √©t√©
      // r√©duite afin d'√©viter que le capybara saute trop haut.  Avec un
      // double saut, il peut atteindre les plateformes les plus hautes du
      // niveau sans sortir de l'√©cran.  Voir README pour plus de d√©tails.
      const jumpForce = 11;
      if (this.jumpCount < 2) {
        this.velY = jumpForce;
        this.isOnGround = false;
        this.jumpCount++;
        playBeep(660 + this.jumpCount * 50, 0.05, 0.07);
      }
    }
    getBounds() {
      // Bo√Æte pour collisions avec bonus et ennemis
      return {
        left: this.x,
        right: this.x + this.width,
        top: this.y + this.height,
        bottom: this.y,
      };
    }
    draw(cameraX) {
      const screenX = this.x - cameraX;
      const screenY = height - groundHeight - this.y - this.height;
      ctx.save();
      ctx.translate(screenX + this.width / 2, screenY + this.height / 2);
      // Incliner ou animer le h√©ros selon le contexte.  Lorsqu'une
      // t√©l√©portation vient de se produire, la variable spinTimer est
      // positive et on applique une rotation compl√®te de 180¬†degr√©s
      // (œÄ¬†radians) pour simuler la sortie du tuyau.  Sinon, on incline
      // l√©g√®rement selon la vitesse horizontale.
      let rot;
      const maxTilt = 0.3;
      if (this.spinTimer > 0) {
        // La progression varie de 0 √† 1 au fur et √† mesure que spinTimer diminue.
        const progress = 1 - (this.spinTimer / 30);
        rot = Math.PI * progress;
      } else {
        rot = Math.max(-maxTilt, Math.min(maxTilt, this.velX / 8));
      }
      ctx.rotate(rot);
      // Si l'image Super¬†Capy est charg√©e, dessiner l'illustration PNG.
      // Appliquer un l√©ger d√©calage vertical pour que les pieds touchent le sol.
      if (capySuperImg.complete && capySuperImg.naturalWidth) {
        const offsetY = 8;
        ctx.drawImage(capySuperImg, -this.width / 2, -this.height / 2 + offsetY, this.width, this.height);
      }
      ctx.restore();
      return;
      ctx.fillStyle = 'rgba(220,30,30,0.85)';
      ctx.beginPath();
      ctx.moveTo(-this.width * 0.45, -this.height * 0.3);
      ctx.lineTo(-this.width * 0.15, -this.height * 0.15);
      ctx.lineTo(-this.width * 0.35, this.height * 0.1);
      ctx.closePath();
      ctx.fill();
      ctx.restore();
      // T√™te
      ctx.beginPath();
      ctx.ellipse(this.width * 0.35, -this.height * 0.1, this.width * 0.32, this.height * 0.42, 0, 0, Math.PI * 2);
      ctx.fill();
      // Oreille repositionn√©e¬†: petite ellipse situ√©e sur le haut de la t√™te.
      // La couleur de l'oreille a √©t√© l√©g√®rement assombrie pour contraster
      // avec la teinte du corps.
      ctx.fillStyle = '#9c704d';
      ctx.beginPath();
      ctx.ellipse(this.width * 0.18, -this.height * 0.35, this.width * 0.12, this.height * 0.18, 0, 0, Math.PI * 2);
      ctx.fill();
      // ≈íil
      ctx.fillStyle = '#fff';
      ctx.beginPath();
      ctx.ellipse(this.width * 0.45, -this.height * 0.1, this.width * 0.07, this.height * 0.09, 0, 0, Math.PI * 2);
      ctx.fill();
      ctx.fillStyle = '#000';
      ctx.beginPath();
      ctx.ellipse(this.width * 0.47, -this.height * 0.1, this.width * 0.03, this.height * 0.04, 0, 0, Math.PI * 2);
      ctx.fill();
      // Nez
      ctx.fillStyle = '#4d3928';
      ctx.beginPath();
      ctx.ellipse(this.width * 0.62, -this.height * 0.02, this.width * 0.03, this.height * 0.04, 0, 0, Math.PI * 2);
      ctx.fill();
      // Queue
      ctx.beginPath();
      ctx.arc(-this.width * 0.45, this.height * 0.1, this.width * 0.06, 0, Math.PI * 2);
      ctx.fillStyle = '#8b6c47';
      ctx.fill();
      // Pattes (statiques, simplifi√©es)
      ctx.fillStyle = '#8b6c47';
      ctx.fillRect(-this.width * 0.22, this.height * 0.35, this.width * 0.12, this.height * 0.22);
      ctx.fillRect(this.width * 0.02, this.height * 0.35, this.width * 0.12, this.height * 0.22);
      ctx.restore();
    }
  }

  class Platform {
    constructor(x, y, widthSeg, heightSeg) {
      this.x = x;
      this.y = y;
      this.width = widthSeg;
      this.height = heightSeg;
    }
    draw(cameraX) {
      const screenX = this.x - cameraX;
      const topY = height - groundHeight - (this.y + this.height);
      ctx.save();
      // Corps du segment
      // Les plateformes ont √©t√© recoloris√©es avec un brun sableux plus clair
      // pour se distinguer davantage du capybara et des ennemis.
      ctx.fillStyle = '#a57950';
      ctx.fillRect(screenX, topY, this.width, this.height);
      // Liser√© plus clair sur le dessus
      ctx.fillStyle = '#c79a64';
      ctx.fillRect(screenX, topY, this.width, this.height * 0.25);
      ctx.restore();
    }
  }

  class Enemy {
    constructor(x, y, type, leftBound, rightBound) {
      this.x = x;
      this.y = y;
      this.type = type;
      // Dimensions et vitesse sp√©cifiques selon le type d'ennemi
      switch (type) {
        case 'koopa':
          this.width = 44;
          this.height = 40;
          this.speed = 1.3;
          break;
        case 'shell':
          this.width = 40;
          this.height = 30;
          this.speed = 0;
          break;
        case 'shell-moving':
          this.width = 40;
          this.height = 30;
          this.speed = 3.0;
          break;
        case 'fish':
          this.width = 40;
          this.height = 28;
          this.speed = 2.0;
          break;
        case 'mine':
          this.width = 36;
          this.height = 36;
          this.speed = 0;
          break;
        default:
          // goomba et autres types inconnus
          this.width = 40;
          this.height = 35;
          this.speed = 1.5;
          break;
      }
      this.leftBound = leftBound;
      this.rightBound = rightBound - this.width;
      // direction initiale : -1 signifie qu'il commence vers la gauche
      this.direction = -1;
      this.alive = true;
    }
    update() {
      if (!this.alive) return;
      const sf = speedFactor;
      switch (this.type) {
        case 'shell-moving':
          // Une carapace en mouvement glisse rapidement dans la direction
          // courante.  Si elle frappe un bord du niveau, elle rebondit.
          this.x += this.direction * this.speed * sf;
          if (this.x <= 0) {
            this.x = 0;
            this.direction = 1;
          } else if (this.x + this.width >= levelWidth) {
            this.x = levelWidth - this.width;
            this.direction = -1;
          }
          break;
        case 'shell':
          // Une carapace immobile ne bouge pas.
          break;
        case 'koopa':
        case 'goomba':
        default:
          // D√©placement classique gauche/droite sur une plateforme
          this.x += this.direction * this.speed * sf;
          if (this.x <= this.leftBound || this.x >= this.rightBound) {
            this.direction *= -1;
          }
          break;
        case 'fish':
          // Les poissons nagent sous l'eau de gauche √† droite et rebondissent
          // lorsqu'ils atteignent les bords du niveau.
          this.x += this.direction * this.speed * sf;
          if (this.x <= 0) {
            this.x = 0;
            this.direction = 1;
          } else if (this.x + this.width >= levelWidth) {
            this.x = levelWidth - this.width;
            this.direction = -1;
          }
          break;
        case 'mine':
          // Les mines sont statiques
          break;
      }
    }
    draw(cameraX) {
      if (!this.alive) return;
      const screenX = this.x - cameraX;
      const screenY = height - groundHeight - this.y - this.height;
      ctx.save();
      ctx.translate(screenX + this.width / 2, screenY + this.height / 2);
      switch (this.type) {
        case 'koopa': {
          // Corps de la tortue : carapace verte et t√™te beige
          ctx.fillStyle = '#4caf50';
          ctx.beginPath();
          ctx.ellipse(0, 0, this.width * 0.5, this.height * 0.4, 0, 0, Math.PI * 2);
          ctx.fill();
          // Bordure de la carapace
          ctx.lineWidth = 2;
          ctx.strokeStyle = '#2e7d32';
          ctx.stroke();
          // T√™te
          ctx.fillStyle = '#f4c27a';
          ctx.beginPath();
          ctx.ellipse(0, -this.height * 0.3, this.width * 0.35, this.height * 0.25, 0, 0, Math.PI * 2);
          ctx.fill();
          // Yeux
          ctx.fillStyle = '#000';
          ctx.beginPath();
          ctx.ellipse(-this.width * 0.1, -this.height * 0.35, this.width * 0.04, this.height * 0.05, 0, 0, Math.PI * 2);
          ctx.fill();
          ctx.beginPath();
          ctx.ellipse(this.width * 0.1, -this.height * 0.35, this.width * 0.04, this.height * 0.05, 0, 0, Math.PI * 2);
          ctx.fill();
          break;
        }
        case 'shell':
        case 'shell-moving': {
          // Carapace : disque vert avec bandes plus claires
          ctx.fillStyle = '#4caf50';
          ctx.beginPath();
          ctx.ellipse(0, 0, this.width * 0.5, this.height * 0.4, 0, 0, Math.PI * 2);
          ctx.fill();
          ctx.fillStyle = '#8bc34a';
          ctx.beginPath();
          ctx.ellipse(0, 0, this.width * 0.35, this.height * 0.25, 0, 0, Math.PI * 2);
          ctx.fill();
          // Contour
          ctx.lineWidth = 2;
          ctx.strokeStyle = '#2e7d32';
          ctx.beginPath();
          ctx.ellipse(0, 0, this.width * 0.5, this.height * 0.4, 0, 0, Math.PI * 2);
          ctx.stroke();
          break;
        }
        case 'fish': {
          // Corps du poisson
          ctx.fillStyle = '#42a5f5';
          ctx.beginPath();
          ctx.ellipse(0, 0, this.width * 0.5, this.height * 0.35, 0, 0, Math.PI * 2);
          ctx.fill();
          // Queue
          ctx.beginPath();
          ctx.moveTo(this.width * 0.5, 0);
          ctx.lineTo(this.width * 0.8, this.height * 0.2);
          ctx.lineTo(this.width * 0.8, -this.height * 0.2);
          ctx.closePath();
          ctx.fill();
          // ≈íil
          ctx.fillStyle = '#fff';
          ctx.beginPath();
          ctx.ellipse(-this.width * 0.15, -this.height * 0.1, this.width * 0.07, this.height * 0.08, 0, 0, Math.PI * 2);
          ctx.fill();
          ctx.fillStyle = '#000';
          ctx.beginPath();
          ctx.ellipse(-this.width * 0.15, -this.height * 0.1, this.width * 0.03, this.height * 0.04, 0, 0, Math.PI * 2);
          ctx.fill();
          break;
        }
        case 'mine': {
          // Dessiner une mine sous-marine : cercle avec pointes
          ctx.fillStyle = '#757575';
          ctx.beginPath();
          ctx.arc(0, 0, this.width * 0.4, 0, Math.PI * 2);
          ctx.fill();
          // Pointes autour
          ctx.strokeStyle = '#424242';
          ctx.lineWidth = 2;
          for (let i = 0; i < 8; i++) {
            const angle = (Math.PI * 2 * i) / 8;
            const startX = Math.cos(angle) * this.width * 0.4;
            const startY = Math.sin(angle) * this.width * 0.4;
            const endX = Math.cos(angle) * this.width * 0.6;
            const endY = Math.sin(angle) * this.width * 0.6;
            ctx.beginPath();
            ctx.moveTo(startX, startY);
            ctx.lineTo(endX, endY);
            ctx.stroke();
          }
          break;
        }
        default: {
          // Ennemi par d√©faut : goomba rouge/rose avec pieds
          ctx.fillStyle = '#e37b7b';
          ctx.beginPath();
          ctx.ellipse(0, 0, this.width * 0.5, this.height * 0.4, 0, 0, Math.PI * 2);
          ctx.fill();
          // T√™te
          ctx.beginPath();
          ctx.ellipse(0, -this.height * 0.3, this.width * 0.35, this.height * 0.25, 0, 0, Math.PI * 2);
          ctx.fillStyle = '#f49f9f';
          ctx.fill();
          // Yeux
          ctx.fillStyle = '#fff';
          ctx.beginPath();
          ctx.ellipse(-this.width * 0.12, -this.height * 0.35, this.width * 0.08, this.height * 0.08, 0, 0, Math.PI * 2);
          ctx.fill();
          ctx.beginPath();
          ctx.ellipse(this.width * 0.12, -this.height * 0.35, this.width * 0.08, this.height * 0.08, 0, 0, Math.PI * 2);
          ctx.fill();
          ctx.fillStyle = '#000';
          ctx.beginPath();
          ctx.ellipse(-this.width * 0.12, -this.height * 0.35, this.width * 0.03, this.height * 0.04, 0, 0, Math.PI * 2);
          ctx.fill();
          ctx.beginPath();
          ctx.ellipse(this.width * 0.12, -this.height * 0.35, this.width * 0.03, this.height * 0.04, 0, 0, Math.PI * 2);
          ctx.fill();
          // Pieds
          ctx.fillStyle = '#c66464';
          ctx.fillRect(-this.width * 0.3, this.height * 0.25, this.width * 0.25, this.height * 0.15);
          ctx.fillRect(this.width * 0.05, this.height * 0.25, this.width * 0.25, this.height * 0.15);
          break;
        }
      }
      ctx.restore();
    }
    getBounds() {
      // R√©duire la bo√Æte de collision gr√¢ce √† ENEMY_HITBOX_MARGIN afin
      // d'offrir une tol√©rance lors des chocs avec le joueur.  Pour un
      // ennemi de type mine ou fish, on conserve tout de m√™me une marge
      // identique pour rester coh√©rent.
      return {
        left: this.x + ENEMY_HITBOX_MARGIN,
        right: this.x + this.width - ENEMY_HITBOX_MARGIN,
        top: this.y + this.height - ENEMY_HITBOX_MARGIN,
        bottom: this.y + ENEMY_HITBOX_MARGIN,
      };
    }
  }

  // Classe repr√©sentant un tuyau dans les niveaux.  Un tuyau est une
  // structure verticale sur laquelle le joueur peut se tenir.  En
  // appuyant sur la touche bas, il peut √™tre transport√© √† une autre
  // position (destX/destY) s'ils sont d√©finis.  Les tuyaux utilisent
  // l'esth√©tique des tuyaux verts de Flappy¬†Bird et de Mario, avec un
  // corps rectangulaire et un embout plus large.
  class Pipe {
    constructor(x, y, height, destX = null, destY = null) {
      this.x = x;
      this.y = y; // position du bas du tuyau (en unit√©s de niveau)
      this.height = height;
      this.width = 60;
      this.destX = destX;
      this.destY = destY;
    }
    getBounds() {
      // Bo√Æte englobante utilis√©e pour les collisions horizontales.  Elle
      // repr√©sente le corps entier du tuyau (du sol jusqu'au haut).
      return {
        left: this.x,
        right: this.x + this.width,
        top: this.y + this.height,
        bottom: this.y,
      };
    }
    getTopBounds() {
      // Bo√Æte de la surface sup√©rieure du tuyau utilis√©e pour d√©tecter
      // l'entr√©e.  On r√©duit l√©g√®rement la hauteur pour permettre un peu
      // de tol√©rance.
      return {
        left: this.x,
        right: this.x + this.width,
        top: this.y + this.height + 5,
        bottom: this.y + this.height - 5,
      };
    }
    draw(cameraX) {
      const screenX = this.x - cameraX;
      // Calculer la position verticale : on dessine depuis le bas du
      // canvas (sol) moins la hauteur du tuyau.
      const screenY = height - groundHeight - this.y - this.height;
      // Couleurs inspir√©es de Flappy¬†Bird : un vert moyen pour le corps
      // et un vert plus clair pour l'embout.  Un vert plus fonc√© sert
      // pour le contour.
      const bodyColor = '#6ec85f';
      const capColor = '#8ade71';
      const borderColor = '#499d3b';
      // Hauteur de l'embout (max 20¬†px ou 20¬†% de la hauteur)
      const capH = Math.min(20, this.height * 0.2);
      // Corps du tuyau
      ctx.fillStyle = bodyColor;
      ctx.fillRect(screenX, screenY + capH, this.width, this.height - capH);
      // Embout : l√©g√®rement plus large que le corps
      ctx.fillStyle = capColor;
      ctx.fillRect(screenX - 5, screenY, this.width + 10, capH);
      // Contours
      ctx.lineWidth = 2;
      ctx.strokeStyle = borderColor;
      ctx.strokeRect(screenX, screenY + capH, this.width, this.height - capH);
      ctx.strokeRect(screenX - 5, screenY, this.width + 10, capH);
    }
  }

  class Bonus {
    constructor(x, y, type = 'carrot') {
      this.x = x;
      this.y = y;
      this.radius = 14;
      // D√©finir explicitement le type s'il est fourni par les donn√©es
      // de niveau.  Par d√©faut, il s'agit d'une carotte.
      this.type = type;
    }
    update() {
      // Les bonus sont statiques dans ce mode
    }
    draw(cameraX) {
      const screenX = this.x - cameraX;
      const screenY = height - groundHeight - this.y;
      ctx.save();
      ctx.translate(screenX, screenY);
      // Bulle
      ctx.fillStyle = 'rgba(255, 236, 105, 0.5)';
      ctx.beginPath();
      ctx.arc(0, 0, this.radius * 1.5, 0, Math.PI * 2);
      ctx.fill();
      if (this.type === 'carrot') {
        // Carotte orient√©e vers le bas
        ctx.fillStyle = '#f6a323';
        ctx.beginPath();
        ctx.moveTo(0, this.radius);
        ctx.lineTo(this.radius * 0.6, -this.radius);
        ctx.lineTo(-this.radius * 0.6, -this.radius);
        ctx.closePath();
        ctx.fill();
        // Fanes
        ctx.fillStyle = '#6ea84f';
        for (let i = 0; i < 3; i++) {
          ctx.beginPath();
          const lx = (-this.radius * 0.25) + i * (this.radius * 0.25);
          ctx.moveTo(lx, -this.radius * 1.05);
          ctx.lineTo(lx + this.radius * 0.15, -this.radius * 1.3);
          ctx.lineTo(lx + this.radius * 0.3, -this.radius * 1.05);
          ctx.closePath();
          ctx.fill();
        }
      } else {
        // Patate
        ctx.fillStyle = '#d7a26c';
        ctx.beginPath();
        ctx.ellipse(0, 0, this.radius, this.radius * 0.75, 0, 0, Math.PI * 2);
        ctx.fill();
        ctx.fillStyle = '#aa7342';
        for (let i = 0; i < 4; i++) {
          const angle = (i * Math.PI * 2) / 4;
          const px = Math.cos(angle) * this.radius * 0.3;
          const py = Math.sin(angle) * this.radius * 0.25;
          ctx.beginPath();
          ctx.ellipse(px, py, this.radius * 0.08, this.radius * 0.05, 0, 0, Math.PI * 2);
          ctx.fill();
        }
      }
      ctx.restore();
    }
    getBounds() {
      return {
        left: this.x - this.radius,
        right: this.x + this.radius,
        top: this.y + this.radius,
        bottom: this.y - this.radius,
      };
    }
  }

  class Goal {
    constructor(x, y, width, height) {
      this.x = x;
      this.y = y;
      this.width = width;
      this.height = height;
    }
    draw(cameraX) {
      const screenX = this.x - cameraX;
      const screenY = height - groundHeight - this.y - this.height;
      ctx.save();
      // M√¢t de drapeau
      ctx.fillStyle = '#b0bec5';
      ctx.fillRect(screenX + this.width * 0.45, screenY, this.width * 0.1, this.height);
      // Drapeau triangulaire
      ctx.fillStyle = '#ff7043';
      ctx.beginPath();
      ctx.moveTo(screenX + this.width * 0.45, screenY + this.height * 0.2);
      ctx.lineTo(screenX + this.width * 0.45 + this.width * 0.6, screenY + this.height * 0.3);
      ctx.lineTo(screenX + this.width * 0.45, screenY + this.height * 0.4);
      ctx.closePath();
      ctx.fill();
      ctx.restore();
    }
    getBounds() {
      return {
        left: this.x,
        right: this.x + this.width,
        top: this.y + this.height,
        bottom: this.y,
      };
    }
  }

  let player = new Player();

  function update() {
    player.update();
    enemies.forEach((e) => e.update());

    // Mettre √† jour les nuages et les oiseaux d√©coratifs
    clouds.forEach((c) => c.update());
    // Faire appara√Ætre occasionnellement un oiseau¬†: la probabilit√© par
    // frame est ajust√©e en fonction de speedFactor pour maintenir un
    // taux constant d'apparition par seconde.  Par exemple, √† 60¬†Hz
    // speedFactor‚âà2.35, ce qui correspond √† ~0.56 oiseaux par seconde.
    const birdSpawnProbPerFrame = 0.004 * speedFactor;
    if (Math.random() < birdSpawnProbPerFrame) {
      spawnBird();
    }
    // Mettre √† jour les oiseaux existants et supprimer ceux qui quittent l'√©cran
    for (let i = birds.length - 1; i >= 0; i--) {
      const bird = birds[i];
      bird.update();
      // Si l'oiseau est trop loin √† gauche par rapport √† la cam√©ra, on le retire
      // pour √©viter des listes inutiles.  On utilise un seuil absolu de -200.
      if (bird.x < -200) {
        birds.splice(i, 1);
      }
    }
    // Collisions avec ennemis.  Utiliser des bo√Ætes de collision r√©duites
    // pour plus de tol√©rance gr√¢ce √† ENEMY_HITBOX_MARGIN.  Le comportement
    // d√©pend du type de l'ennemi : certains peuvent √™tre √©limin√©s en
    // sautant dessus, d'autres (poissons, mines, carapaces en mouvement)
    // sont l√©taux au moindre contact.
    const pBounds = player.getBounds();
    for (const e of enemies) {
      if (!e.alive) continue;
      const eb = e.getBounds();
      // D√©tection de collision de bo√Ætes englobantes
      if (pBounds.right > eb.left && pBounds.left < eb.right && pBounds.bottom < eb.top && pBounds.top > eb.bottom) {
        // Zone de protection au spawn
        if (player.spawnTimer > 0 || (typeof player.spawnSafeX === 'number' && player.x < player.spawnSafeX)) {
          continue;
        }
        // D√©terminer si l'on frappe l'ennemi par le dessus (velY n√©gative et croisement du haut de l'ennemi)
        const stomping = (player.velY < 0 && player.y <= e.y + e.height && player.y + player.height >= e.y + e.height);
        if (e.type === 'goomba' || e.type === 'koopa') {
          if (stomping) {
            if (e.type === 'koopa') {
              // La tortue se transforme en carapace stationnaire
              e.type = 'shell';
              e.speed = 0;
            } else {
              // Goomba √©limin√©
              e.alive = false;
            }
            // Rebondir
            player.velY = 8;
            playBeep(880, 0.05, 0.08);
            continue;
          } else {
            // Contact lat√©ral : si la carapace est d√©j√† stationnaire, elle
            // commence √† se d√©placer.  Sinon, c'est la mort du joueur.
            if (e.type === 'shell') {
              e.type = 'shell-moving';
              e.speed = 3.0;
              e.direction = (player.velX >= 0 ? 1 : -1);
              player.velY = 8;
              playBeep(880, 0.05, 0.08);
              continue;
            }
            gameOver(false);
            return;
          }
        } else if (e.type === 'shell' || e.type === 'shell-moving') {
          // Une carapace en mouvement ou immobile est l√©tale sauf si on la
          // frappe par-dessus (voir ci-dessus).  Ici, on meurt.
          gameOver(false);
          return;
        } else {
          // Poissons, mines et autres types : collision mortelle
          gameOver(false);
          return;
        }
      }
    }
    // G√©rer les collisions entre une carapace en mouvement et les autres ennemis.
    // Lorsqu'une carapace en mouvement touche un ennemi ordinaire,
    // l'autre ennemi est √©limin√© et la carapace dispara√Æt.  Ce
    // comportement s'inspire des jeux de plateforme classiques.
    for (let i = 0; i < enemies.length; i++) {
      const shell = enemies[i];
      if (!shell.alive || shell.type !== 'shell-moving') continue;
      const sb = shell.getBounds();
      for (let j = 0; j < enemies.length; j++) {
        if (i === j) continue;
        const other = enemies[j];
        if (!other.alive) continue;
        // Ignorer les autres carapaces
        if (other.type === 'shell' || other.type === 'shell-moving') continue;
        const ob = other.getBounds();
        if (sb.right > ob.left && sb.left < ob.right && sb.bottom < ob.top && sb.top > ob.bottom) {
          // Collision¬†: l'ennemi est √©limin√© et la carapace cesse d'exister
          other.alive = false;
          shell.alive = false;
          break;
        }
      }
    }

    // Collisions avec les tuyaux : emp√™cher le capybara de traverser la
    // paroi des tuyaux et permettre la t√©l√©portation lorsque le joueur
    // se trouve sur le dessus et appuie sur la touche bas.
    for (const pipe of pipes) {
      // Collision horizontale avec le corps du tuyau
      const pb = player.getBounds();
      const pbLeft = pb.left;
      const pbRight = pb.right;
      const pbTop = pb.top;
      const pbBottom = pb.bottom;
      const tb = pipe.getBounds();
      if (pbRight > tb.left && pbLeft < tb.right && pbBottom < tb.top && pbTop > tb.bottom) {
        // Le capybara chevauche le tuyau horizontalement.  Si son centre
        // est √† gauche du tuyau, on le positionne √† gauche ; sinon √† droite.
        if (player.x + player.width / 2 < pipe.x + pipe.width / 2) {
          player.x = pipe.x - player.width;
        } else {
          player.x = pipe.x + pipe.width;
        }
        player.velX = 0;
      }
      // V√©rifier l'entr√©e dans le tuyau : le joueur doit se tenir sur
      // l'embouchure (dessus du tuyau) et appuyer sur la touche bas.
      const topB = pipe.getTopBounds();
      // Proximit√© verticale : la position de y correspond au bas du
      // capybara.  V√©rifier qu'il est quasiment au m√™me niveau que le
      // sommet du tuyau.  Utiliser une marge de 3¬†px.
      if (Math.abs(player.y - (pipe.y + pipe.height)) < 8 &&
          pbRight > topB.left && pbLeft < topB.right) {
        if (keys.down && pipe.destX != null && pipe.destY != null) {
          // Trouver le tuyau de destination correspondant aux coordonn√©es destX/destY
          let destPipe = null;
          for (const p of pipes) {
            if (p.x === pipe.destX && p.y === pipe.destY) {
              destPipe = p;
              break;
            }
          }
          if (destPipe) {
            // Placer le joueur au centre du dessus du tuyau de sortie
            player.x = destPipe.x + (destPipe.width - player.width) / 2;
            player.y = destPipe.y + destPipe.height;
          } else {
            // Retomber sur la logique originale si aucun tuyau n'est trouv√©
            player.x = pipe.destX;
            player.y = pipe.destY;
          }
          // R√©initialiser la vitesse pour √©viter les sauts intempestifs
          player.velX = 0;
          player.velY = 0;
          // R√©activer la protection spawn
          player.spawnTimer = 60;
          // D√©marrer l'animation de rotation lors de la sortie du tuyau
          player.spinTimer = 30;
        }
      }
    }

    // Mettre √† jour la trace du capybara.  Ajouter un segment au niveau
    // actuel de position du joueur et diminuer progressivement l'opacit√©
    // des segments existants.  Limiter la longueur de la trace √†
    // MAX_TRAIL_SEGMENTS.
    trailSegments.push({ x: player.x + player.width / 2, y: player.y, alpha: 1 });
    if (trailSegments.length > MAX_TRAIL_SEGMENTS) {
      trailSegments.shift();
    }
    for (let i = 0; i < trailSegments.length; i++) {
      const seg = trailSegments[i];
      seg.alpha -= 0.02 * speedFactor;
    }
    // Retirer les segments invisibles
    trailSegments = trailSegments.filter((seg) => seg.alpha > 0);

    // Collisions avec bonus
    for (let i = bonuses.length - 1; i >= 0; i--) {
      const b = bonuses[i];
      const bb = b.getBounds();
      if (pBounds.right > bb.left && pBounds.left < bb.right && pBounds.bottom < bb.top && pBounds.top > bb.bottom) {
        // Ajouter des points selon le type du bonus¬†: 1 pour une carotte,
        // 10 pour une patate.  Les bonus restent √† leur type pr√©d√©fini
        // lors du chargement du niveau.
        if (b.type === 'potato') {
          score += 10;
        } else {
          score += 1;
        }
        playBeep(880, 0.05, 0.08);
        bonuses.splice(i, 1);
      }
    }
    // Collision avec goal
    if (goal) {
      const gb = goal.getBounds();
      if (pBounds.right > gb.left && pBounds.left < gb.right && pBounds.bottom < gb.top && pBounds.top > gb.bottom) {
        // Victoire
        gameOver(true);
        return;
      }
    }
    // Le score ne d√©pend plus du temps¬†: seule la collecte des bonus
    // (carottes et patates) incr√©mente la valeur.  Aucune augmentation
    // automatique n‚Äôest appliqu√©e ici.
  }

  function draw() {
    // Effacement et fond.  Choisir un th√®me diff√©rent pour les niveaux
    // sous-marins¬†: d√©grad√© de bleu.  Pour les niveaux terrestres, le
    // d√©grad√© de ciel est conserv√© et une bande de sol est dessin√©e.
    ctx.clearRect(0, 0, width, height);
    const currentLevel = levels[currentLevelIndex] || {};
    const underwater = currentLevel.underwater;
    if (underwater) {
      // D√©grad√© vertical du fond marin (bleu fonc√© vers bleu clair)
      const waterGrad = ctx.createLinearGradient(0, 0, 0, height);
      waterGrad.addColorStop(0, '#012f6b');
      waterGrad.addColorStop(1, '#0288d1');
      ctx.fillStyle = waterGrad;
      ctx.fillRect(0, 0, width, height);
    } else {
      const skyGrad = ctx.createLinearGradient(0, 0, 0, height);
      skyGrad.addColorStop(0, '#e3f2fd');
      skyGrad.addColorStop(1, '#b3e5fc');
      ctx.fillStyle = skyGrad;
      ctx.fillRect(0, 0, width, height);
    }
    // Calculer la position de la cam√©ra
    let cameraX = player.x - width * 0.3;
    cameraX = Math.max(0, Math.min(cameraX, levelWidth - width));
    // Dessiner le sol uniquement dans les niveaux terrestres
    if (!underwater) {
      const groundY = height - groundHeight;
      ctx.fillStyle = '#81c784';
      ctx.fillRect(-cameraX, groundY, levelWidth, groundHeight);
      ctx.fillStyle = '#4caf50';
      ctx.fillRect(-cameraX, groundY, levelWidth, groundHeight * 0.2);
    }
    // Dessiner les nuages en arri√®re‚Äëplan.  Ils utilisent un facteur de
    // parallaxe et sont plac√©s avant les plateformes.
    clouds.forEach((c) => c.draw(cameraX));
    // Dessiner les oiseaux d√©coratifs
    birds.forEach((b) => b.draw(cameraX));
    // Dessiner les plateformes
    platforms.forEach((p) => p.draw(cameraX));
    // Dessiner les tuyaux
    pipes.forEach((p) => p.draw(cameraX));
    // Dessiner les bonus
    bonuses.forEach((b) => b.draw(cameraX));
    // Dessiner les ennemis
    enemies.forEach((e) => e.draw(cameraX));
    // Dessiner la trace lumineuse du capybara avant de le dessiner.  Chaque
    // segment est un petit cercle avec une opacit√© d√©croissante qui
    // repr√©sente la tra√Æn√©e du h√©ros.
    ctx.save();
    for (const seg of trailSegments) {
      const sx = seg.x - cameraX;
      const sy = height - groundHeight - seg.y;
      ctx.globalAlpha = Math.max(0, seg.alpha * 0.6);
      ctx.fillStyle = '#ffffff';
      ctx.beginPath();
      ctx.arc(sx, sy - player.height * 0.2, 4, 0, Math.PI * 2);
      ctx.fill();
    }
    ctx.restore();
    // Dessiner le goal
    if (goal) goal.draw(cameraX);
    // Dessiner le joueur
    player.draw(cameraX);

    // Afficher le score au centre en haut.  Utiliser un texte dor√© et une
    // bo√Æte sombre semi‚Äëtransparente pour am√©liorer la visibilit√© sur les
    // arri√®res‚Äëplans clairs.  Seul le nombre est affich√©.
    ctx.save();
    ctx.font = 'bold 28px Arial';
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    const scoreStr = String(Math.floor(score));
    const metrics2 = ctx.measureText(scoreStr);
    const pad = 12;
    const boxWidth2 = metrics2.width + pad * 2;
    const boxHeight2 = 38;
    const boxX2 = (width - boxWidth2) / 2;
    const boxY2 = 6;
    ctx.fillStyle = 'rgba(0,0,0,0.4)';
    ctx.fillRect(boxX2, boxY2, boxWidth2, boxHeight2);
    ctx.fillStyle = '#FFD700';
    ctx.fillText(scoreStr, width / 2, boxY2 + boxHeight2 / 2);
    ctx.restore();

    // Dessiner la fl√®che directionnelle en d√©but de niveau.  La fl√®che est
    // dessin√©e directement sur le canvas pour garantir sa visibilit√©.
    // Elle clignote toutes les 400¬†ms et dispara√Æt apr√®s `arrowDuration`¬†ms.
    {
      const now = performance.now();
      const elapsed = now - arrowStartTime;
      if (elapsed < arrowDuration) {
        ctx.save();
        // Police l√©g√®rement plus grande que le score pour diff√©rencier la fl√®che.
        // On reste sur une taille raisonnable pour ne pas distraire le joueur.
        ctx.font = 'bold 48px Arial';
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';
        // Calque d'opacit√© pour clignoter¬†: alterner visible/invisible toutes
        // 400¬†ms.  Lorsque blinkPhase vaut 0, la fl√®che est visible.
        const blinkPhase = Math.floor(elapsed / 400) % 2;
        ctx.globalAlpha = blinkPhase === 0 ? 1 : 0;
        // Couleur ambr√©e pour une bonne visibilit√© sur le ciel pastel
        ctx.fillStyle = '#ff9200';
        // Positionner la fl√®che sous le score, l√©g√®rement plus bas que la bo√Æte du score
        // Position verticale de la fl√®che, l√©g√®rement en dessous de la zone du score
        const arrowY = 120;
        const arrowChar = arrowDirection === 'right' ? '‚Üí' : '‚Üê';
        ctx.fillText(arrowChar, width / 2, arrowY);
        ctx.restore();
      }
    }
  }

  function gameLoop() {
    // Suspendre la boucle tant que la pop‚Äëup de pr√©‚Äëlancement est active
    if (window.CAPY_PRESTART_ACTIVE) {
      requestAnimationFrame(gameLoop);
      return;
    }
    if (state === 'playing') {
      update();
      draw();
    }
    requestAnimationFrame(gameLoop);
  }

  /**
   * S√©lectionne un message humoristique √† afficher sur l'√©cran de fin de
   * niveau.  Si le score final est faible (<10), renvoie un message
   * satirique qui souligne la performance modeste.  Sinon, un message
   * positif est choisi parmi la liste habituelle.
   * @param {number} [score] - score final du joueur
   * @returns {string} Un message √† afficher
   */
  function getFunMessage(score) {
    // Messages satiriques pour les faibles scores (<10)
    const lowMessages = [
      "Un score aussi bas¬†? M√™me un escargot sauterait plus loin¬†!",
      "On dirait que les goombas t'ont roul√© dessus‚Ä¶ √† reculons¬†!",
      "Ton capybara a confondu courir et piquer un somme, on dirait."
    ];
    // Messages positifs et anecdotes habituelles
    const messages = [
      // Messages d'origine
      "Le capybara r√™ve de ch√¢teaux en fromage.",
      "Incroyable¬†! Un capybara acrobate¬†!",
      "Mario n'a qu'√† bien se tenir¬†!",
      "Les capybaras sautent mieux qu'on ne le pense¬†!",
      "Quelle aventure haute en couleur¬†!",
      // Nouvelles anecdotes amusantes pour enrichir les fins de partie
      "On raconte qu‚Äôun capybara a travers√© la jungle en sautant sur des noix de coco.",
      "Le capybara adore les cascades de fromage fondant.",
      "Selon la l√©gende, les capybaras font du yoga apr√®s chaque victoire.",
      "Bravo¬†! On dirait que les capybaras t‚Äôont adopt√©.",
      "Le capybara a d√©sormais sa propre cape de super‚Äëh√©ros.",
      "Un capybara heureux partage toujours ses carottes.",
      "Les capybaras r√™vent de plateformes infinies et de fromages c√©lestes.",
      "Avez‚Äëvous entendu¬†? Un capybara a battu un record de saut en longueur.",
      "Les capybaras chantent de joie quand on atteint le drapeau.",
      "Qui aurait cru qu‚Äôun capybara pouvait courir aussi vite qu‚Äôun lapin¬†?",
      "On murmure que les capybaras jouent √† cache‚Äëcache avec les goombas.",
      "Un fromage glissant n‚Äôarr√™te jamais un capybara d√©termin√©."
    ];
    if (typeof score === 'number' && score < 10) {
      return lowMessages[Math.floor(Math.random() * lowMessages.length)];
    }
    return messages[Math.floor(Math.random() * messages.length)];
  }

  function gameOver(victory = false) {
    if (state !== 'playing') return;
    state = victory ? 'win' : 'gameover';
    win = victory;
    stopMusic();
    const finalScore = Math.floor(score);
    if (finalScore > highScore) {
      highScore = finalScore;
      try {
        localStorage.setItem('capyPlatformHighScore', String(highScore));
      } catch (e) {
        // ignore
      }
    }
    if (currentScoreEl) currentScoreEl.textContent = `${finalScore}`;
    if (highScoreEl) highScoreEl.textContent = `${highScore}`;
    // Mettre √† jour le titre et le message fun en fonction du r√©sultat
    const titleEl = document.getElementById('platform-gameover-title');
    if (titleEl) {
      // Lorsque le joueur gagne un niveau, l'√©cran ne doit pas afficher
      // ¬´¬†Game¬†Over¬†¬ª mais simplement ¬´¬†Bravo¬†!¬†¬ª pour f√©liciter la r√©ussite.
      titleEl.textContent = victory ? 'Bravo¬†!' : 'Game¬†Over';
    }
    if (funMessageEl) {
      // Afficher une illustration de capybara super-h√©ros et le message.
      if (victory) {
        funMessageEl.innerHTML = `<img src="assets/capybara_super.png" alt="Capybara" /> <span>Bravo¬†!</span>`;
      } else {
        const msg = getFunMessage(finalScore);
        funMessageEl.innerHTML = `<img src="assets/capybara_super.png" alt="Capybara" /> <span>${msg}</span>`;
      }
    }
    gameOverOverlay.classList.remove('hidden');

    // Afficher/masquer le bouton ¬´¬†Niveau suivant¬†¬ª selon la victoire et
    // l'existence d'un niveau ult√©rieur.  Ce bouton permet de passer
    // directement au niveau suivant sans repasser par le menu.
    if (nextBtn) {
      if (victory && currentLevelIndex < levels.length - 1) {
        nextBtn.style.display = 'inline-block';
      } else {
        nextBtn.style.display = 'none';
      }
    }

    // D√©bloquer le niveau suivant en enregistrant la progression dans localStorage.
    if (victory) {
      try {
        const stored = localStorage.getItem('capyPlatformMaxLevel');
        let maxUnlocked = 1;
        if (stored !== null) maxUnlocked = parseInt(stored, 10) || 1;
        const nextLevel = currentLevelIndex + 2; // niveau suivant en 1‚Äëbased
        if (nextLevel > maxUnlocked) {
          localStorage.setItem('capyPlatformMaxLevel', String(nextLevel));
        }
      } catch (e) {
        // ignore
      }
    }
  }

  function resetGame() {
    score = 0;
    state = 'playing';
    win = false;
    gameOverOverlay.classList.add('hidden');
    player.reset();
    loadLevel(currentLevelIndex);
    startMusic();
    // Ne pas red√©marrer explicitement la boucle de jeu ici.  La boucle
    // principale est d√©j√† lanc√©e lors du chargement de la page.  Un
    // nouvel appel √† requestAnimationFrame dans resetGame provoquerait
    // plusieurs boucles simultan√©es, entra√Ænant une acc√©l√©ration du jeu
    // apr√®s chaque partie.  Voir applySpeedFactor() pour la gestion
    // dynamique de la vitesse.
  }

  // √âcouteurs pour les boutons de l'√©cran Game¬†Over
  if (replayBtn) {
    replayBtn.addEventListener('click', () => {
      // Rejouer le m√™me niveau
      resetGame();
    });
  }
  if (menuBtn) {
    menuBtn.addEventListener('click', () => {
      // Rediriger vers le nouveau menu principal situ√© dans le dossier Capy.  Comme
      // ce fichier se situe dans le dossier capy, il faut remonter d'un niveau.
      window.location.href = '../Capy/games.html';
    });
  }

  // Passer au niveau suivant lorsque le joueur clique sur le bouton pr√©vu √†
  // cet effet.  On incr√©mente l'indice de niveau, le remet √† z√©ro en cas
  // de d√©passement et on charge le nouveau niveau.
  if (nextBtn) {
    nextBtn.addEventListener('click', () => {
      if (currentLevelIndex < levels.length - 1) {
        currentLevelIndex++;
      } else {
        currentLevelIndex = 0;
      }
      resetGame();
    });
  }

  // D√©marrer le jeu au chargement
  loadLevel(currentLevelIndex);
  startMusic();
  requestAnimationFrame(gameLoop);
})();